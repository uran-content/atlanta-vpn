# handlers.handlers.py
import base64
import logging
import os
import random
import re
import uuid
from datetime import datetime, timezone, timedelta

import pandas as pd
from aiogram import Bot, F, Router, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, Message, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from py3xui import AsyncApi, Client
from apscheduler.triggers.cron import CronTrigger
import string
import hashlib
from config import CHANNEL, BOT, SUPPORT, CHANNEL_LINK, REDIRECT_URI, SUPPORT_URI
from handlers.classes import (
    AdminBroadcastStates,
    AdminKeyRemovalStates,
    AdminStates,
    BalanceForm,
    PromoCodeAdminStates,
    PromoCodeState,
    ReplaceKeyForm,
    SubscriptionStates,
    AccountStates,
    KeyNameStates
)
from handlers.database import (
    add_active_key,
    add_or_update_user,
    add_promocode,
    add_promocode_days,
    add_referral_bonus,
    add_server,
    add_used_promocode,
    check_expiring_subscriptions,
    check_unused_free_keys,
    check_user_used_promocode,
    delete_server,
    get_admins,
    get_all_promocodes,
    get_all_servers,
    get_all_users,
    get_api_instance,
    get_available_countries,
    get_free_days,
    get_free_keys_count,
    get_key_by_uniquie_id,
    get_key_expiry_date,
    get_keys_count,
    get_promocode,
    get_referral_count,
    get_server_by_address,
    get_server_by_id,
    get_server_count_by_address,
    get_user,
    get_user_by_username,
    get_user_email,
    get_user_keys,
    remove_key_bd,
    remove_promocode,
    save_or_update_email,
    set_free_keys_count,
    update_balance,
    update_free_keys_count,
    update_key_expiry_date,
    update_keys_count,
    update_promocode_amount,
    update_referral_count,
    update_server_clients_count,
    update_server_info,
    update_subscription,
    get_user_transactions,
    add_transaction,
    update_transaction_status,
    get_transaction_by_id,
    set_is_first_payment_done,
    get_is_first_payment_done,
    get_user_info,
    update_user_channel,
    update_user_pay_count,
    get_system_statistics,
    get_channel_statistics,
    get_user_segments,
    get_users_with_unused_free_keys,
    add_payment_method,
    get_user_payment_methods,
    delete_payment_method,
    get_payment_method_by_id,
    get_users_by_server_address,
    sync_payment_id_for_all_keys,
    get_payment_id_for_key,
    set_payment_id_for_key,
    get_all_keys_with_payment_method,
    get_user_id_by_key,
    update_key_expiration,
    update_key_name,
)
from handlers.db_utils.server_utils import (
    add_inbound,
    get_server_inbounds,
    get_servers_with_total_clients,
    remove_inbound,
    update_inbound_id,
    update_inbound_max_clients,
    update_inbound_pbk,
    update_inbound_port,
    update_inbound_protocol,
    update_inbound_sid,
    update_inbound_sni,
    update_inbound_utls,
)
from handlers.payments import check_payment_status, create_payment, check_transaction_status
from handlers.utils import (
    extract_key_data,
    generate_random_string,
    send_info_for_admins,
    send_channel_log
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()


async def send_unused_keys_notification(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
    """
    try:
        users = await check_unused_free_keys()
        kb = InlineKeyboardBuilder()
        kb.button(text="üåê –ü–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="connection")
        kb.button(text="‚óÄÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="back_to_menu")
        kb.adjust(1)

        for user_id in users:
            user = await get_user(user_id=user_id)
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=(
                        "üéÅ <b>–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π VPN!</b>\n\n"
                        "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –Ω–∞—à —Å–µ—Ä–≤–∏—Å –±–µ—Å–ø–ª–∞—Ç–Ω–æ.\n"
                        "–ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã VPN!\n\n"
                        "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
                        "‚Ä¢ –ù–∞–¥—ë–∂–Ω–∞—è –∑–∞—â–∏—Ç–∞\n"
                        "‚Ä¢ –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
                    ),
                    reply_markup=kb.as_markup(),
                    parse_mode="HTML"
                )
                await send_info_for_admins(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–º –∫–ª—é—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", await get_admins(), bot, username=user.get("username"))
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–º –∫–ª—é—á–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_unused_keys_notification: {e}")

async def send_expiring_subscription_notification(bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö
    """
    try:
        # –°–æ–∑–¥–∞–µ–º storage –∏ state –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        storage = MemoryStorage()
        state = FSMContext(storage=storage, key='notification_state')
        
        expiring_subs = await check_expiring_subscriptions()
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
        kb.button(text="‚óÄÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é", callback_data="back_to_menu")
        kb.adjust(1)

        for user_id, sub_end, key in expiring_subs:
            try:
                user = await get_user(user_id=user_id)
                end_date = datetime.fromisoformat(sub_end).strftime("%d.%m.%Y")
                await bot.send_message(
                    chat_id=user_id,
                    text=(
                        "‚ö†Ô∏è <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!</b>\n\n"
                        f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n"
                        f"üîë –ö–ª—é—á: <code>{key}</code>\n\n"
                        "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–µ—Ä–≤–∏—Å–æ–º –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤,\n"
                        "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ.\n\n"
                        "üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:\n"
                        "‚Ä¢ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ VPN\n"
                        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫\n"
                        "‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
                    ),
                    reply_markup=kb.as_markup(),
                    parse_mode="HTML"
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await state.set_data({
                    f"user_{user_id}": {
                        "key_to_connect": key,
                        "user_id": user_id,
                        "expiration_date": sub_end
                    }
                })
                await send_info_for_admins(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}", await get_admins(), bot, username=user.get("username"))
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                await send_info_for_admins(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –∏—Å—Ç–µ–∫–∞—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ {user_id}: {e}", await get_admins(), bot, username=user.get("username"))
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_expiring_subscription_notification: {e}")



def setup_notification_scheduler(bot: Bot) -> AsyncIOScheduler:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    Args:
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        
    Returns:
        AsyncIOScheduler: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    try:
        scheduler = AsyncIOScheduler()
        
        
        async def send_expiring_subs_wrapper(bot):
            """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
            try:
                await send_expiring_subscription_notification(bot)
            except Exception as e:
                logger.error(f"Error in send_expiring_subs_wrapper: {e}")
        
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –ø–æ–¥–ø–∏—Å–∫–∞—Ö (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 12:00)
        scheduler.add_job(
            send_expiring_subs_wrapper,
            trigger='cron',
            hour=12,
            args=[bot],
            id='expiring_subs_notifications',
            name='Send expiring subscription notifications',
            replace_existing=True,
            misfire_grace_time=None  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        )
                  

        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        return scheduler
        
    except Exception as e:
        logger.error(f"Error setting up notification scheduler: {e}")
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        fallback_scheduler = AsyncIOScheduler()
        fallback_scheduler.start()
        return fallback_scheduler

@router.message(CommandStart())
async def start_command(message: types.Message, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    """
    args = message.text.split()
    referrer_id = None

    # –°–æ–∑–¥–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"
    reply_kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚óÄÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")]],
        resize_keyboard=True,
        persistent=True
    )

    channel_id = CHANNEL

    if len(args) > 1 and args[1].startswith("ref_"):
        referrer_id = int(args[1].replace("ref_", ""))
        await state.update_data(referrer_id=referrer_id)

    if len(args) > 1 and args[1].startswith("channel_"):
        channel_from = args[1].replace("channel_", "")
        await send_channel_log(
            bot=message.bot,
            channel_from=channel_from,
            username=message.from_user.username
        ) 
        await state.update_data(channel_from=channel_from)

    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=message.from_user.id)
        is_subscribed = member.status not in ["left", "kicked", "banned"]
        
        if not is_subscribed:
            kb = InlineKeyboardBuilder()
            kb.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
            kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            kb.adjust(1)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            await state.set_state(SubscriptionStates.waiting_for_subscription)
            
            await message.answer(
                "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"‚Ä¢ {channel_id}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.\n\n"
                "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç–æ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º:\n"
                "https://telegra.ph/Polzovatelskoe-soglashenie-11-15-12\n\n",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            return

    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
              

    if referrer_id != message.from_user.id if message.from_user else None:
        existing_user = await get_user(user_id=message.from_user.id if message.from_user else None)
        if not existing_user:

                await add_or_update_user(
                    user_id=message.from_user.id,
                    username=message.from_user.username or f"None{random.randint(10, 999)}",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º f-string
                    subscription_type="–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏",
                    is_admin=False,
                    balance=0,
                    subscription_end=None,
                    referrer_id=referrer_id
                )
                await add_referral_bonus(referrer_id, 50)
                await update_referral_count(referrer_id)

                referrer = await get_user(user_id=referrer_id)
                if referrer:
                    kb = InlineKeyboardBuilder()
                    kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                    kb.adjust(1, 1)
                    await bot.send_message(
                        referrer_id,
                        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} "
                        f"–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!\n\n"
                        f"üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: <b>50‚ÇΩ</b>\n"
                        f"üíé –í—ã —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 30% –æ—Ç –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π!",
                        parse_mode="HTML",
                        reply_markup=kb.as_markup()
                    )                
                await message.answer(
                    "üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!</b>\n\n"
                    "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                    "–í—ã —Ç–æ–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã:\n"
                    "‚îî 50‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "‚îî 30% –æ—Ç –≤—Å–µ—Ö –∏—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π\n\n",
                    parse_mode="HTML",
                    reply_markup=reply_kb
                )

    kb = InlineKeyboardBuilder()

    user = await get_user(user_id=message.from_user.id)
    if not user:
        await add_or_update_user(
            user_id=message.from_user.id, 
            username=message.from_user.username or f"None{random.randint(10, 999)}", # –ò—Å–ø–æ–ª—å–∑—É–µ–º f-string
            subscription_type="–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏", 
            is_admin=False, 
            balance=0, 
            subscription_end=None
        )
        kb.button(text="–ü–û–õ–£–ß–ò–¢–¨", callback_data="connection")
        kb.adjust(1)        
        welcome_text = (
            f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.username or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π(–£ –≤–∞—Å –Ω–µ—Ç username)'}!</b>\n\n"
            "üéÅ <b>–ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>\n"
            "‚îî –î–∞—Ä–∏–º —Ç–µ–±–µ <b>3 –¥–Ω—è</b> –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞\n\n"
            "‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ VPN:</b>\n"
            "‚îú üöÄ –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
            "‚îú üõ° –ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚îú üîì –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n"
            "‚îú üí≥ –£–¥–æ–±–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏ –†–§\n"
            "‚îî üí∞ –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ\n\n"
            "ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n"
            "‚îî –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π:\n"
            "   ‚Ä¢ 50‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "   ‚Ä¢ 30% —Å–æ –≤—Å–µ—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π\n\n"
            "üì± <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>\n"
            "‚îî iOS, Android, MacOS –∏ Windows\n\n"
            "‚¨áÔ∏è <b>–ñ–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!</b> ‚¨áÔ∏è"
        )
        await message.answer_photo(
            photo=types.FSInputFile("handlers/images/07.jpg"),
            caption=welcome_text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        if len(args) > 1 and args[1].startswith("channel_"):
            channel_from = args[1].replace("channel_", "")   
            await update_user_channel(
                user_id=message.from_user.id,
                from_channel=channel_from
            )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é:", reply_markup=reply_kb)
    else:
        await state.clear()
        kb.button(text="üåê –ö—É–ø–∏—Ç—å VPN", callback_data="connection")
        kb.button(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
        kb.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        kb.button(text="üìñ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="instruction")
        kb.button(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite")
        kb.button(text="üÜò –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN?", callback_data="troubleshoot")
        kb.adjust(1, 1, 2, 1, 1)
        welcome_text = (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</b>\n\n"
            "üöÄ –û–±—Ö–æ–¥–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ª—é–±–∏–º–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.\n\n"
            "üìñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        await message.answer_photo(
            photo=types.FSInputFile("handlers/images/04.jpg"),
            caption=welcome_text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–Ω—é:", reply_markup=reply_kb)

@router.callback_query(F.data == "troubleshoot")
async def troubleshoot_vpn(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é –ø—Ä–æ–±–ª–µ–º —Å VPN
    """
    try:
        channel_id = CHANNEL
        member = await bot.get_chat_member(chat_id=channel_id, user_id=callback.from_user.id)
        is_subscribed = member.status not in ["left", "kicked", "banned"]
        
        if not is_subscribed:
            kb = InlineKeyboardBuilder()
            kb.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
            kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            kb.adjust(1)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            await state.set_state(SubscriptionStates.waiting_for_subscription)
            
            await callback.message.answer(
                "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"‚Ä¢ {channel_id}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.\n\n"
                "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç–æ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º:\n"
                "https://telegra.ph/Polzovatelskoe-soglashenie-11-15-12\n\n",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            return

    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –∫–ª—é—á", callback_data="replace_key")
    kb.button(text="üåç –°–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data="change_key_country")
    kb.button(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=SUPPORT_URI)
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    kb.adjust(1)

    troubleshoot_text = (
        "üõ† <b>–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å VPN</b>\n\n"
        "<b>–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—à–µ–Ω–∏—è:</b>\n"
        "1. üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "2. üì∂ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
        "3. ‚ö°Ô∏è –û—Ç–∫–ª—é—á–∏—Ç–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–∂–µ–Ω–∏–µ\n\n"
        "<b>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å:</b>\n"
        "4. üåç –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç—Ä–∞–Ω—É\n"
        "5. üîë –ó–∞–º–µ–Ω–∏—Ç–µ –∫–ª—é—á –Ω–∞ –Ω–æ–≤—ã–π\n\n"
        "<b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏:</b>\n"
        "6. üîÑ –û–±–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
        "7. üßπ –û—á–∏—Å—Ç–∏—Ç–µ –∫—ç—à\n\n"
        "‚ùì –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
    )

    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/8banner.png"),
            caption=troubleshoot_text,
        )
    )

    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())


@router.callback_query(F.data == "check_subscription")
async def check_subscription(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    """
    channel_id = CHANNEL
    
    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=callback.from_user.id)
        is_subscribed = member.status not in ["left", "kicked", "banned"]
        
        if not is_subscribed:
            kb = InlineKeyboardBuilder()
            kb.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
            kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            kb.adjust(1)
            
            await callback.message.answer(
                "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"‚Ä¢ {channel_id}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª\n\n",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            return
        
        existing_user = await get_user(user_id=callback.from_user.id)
        if not existing_user:
            data = await state.get_data()
            referrer_id = data.get('referrer_id')
            random_username = f"user{str(uuid.uuid4())[:8]}" if not callback.from_user.username else callback.from_user.username
            channel_from = data.get('channel_from')
            await update_user_channel(
                user_id=callback.from_user.id,
                from_channel=channel_from
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if referrer_id and referrer_id != callback.from_user.id:
                referrer = await get_user(user_id=referrer_id)
                if referrer:
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º
                    await add_or_update_user(
                        user_id=callback.from_user.id,
                        username=random_username,
                        subscription_type="–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏",
                        is_admin=False,
                        balance=0,
                        subscription_end=None,
                        referrer_id=referrer_id
                    )
                    
                    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                    await add_referral_bonus(referrer_id, 50)
                    await update_referral_count(referrer_id)
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                    kb_ref = InlineKeyboardBuilder()
                    kb_ref.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                    kb_ref.adjust(1)
                    
                    try:
                        await bot.send_message(
                            referrer_id,
                            "üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                            "üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ\n\n"
                            "üí∞ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ: <b>50‚ÇΩ</b>\n"
                            "üíé –í—ã —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 30% –æ—Ç –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π!",
                            parse_mode="HTML",
                            reply_markup=kb_ref.as_markup()
                        )
                    except Exception as e:
                        logger.error(f"Error sending referral notification: {e}")

                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await callback.message.answer(
                        "üéÅ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É!</b>\n\n"
                        "–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
                        "–í—ã —Ç–æ–∂–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã:\n"
                        "‚îî 50‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                        "‚îî 30% –æ—Ç –≤—Å–µ—Ö –µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π\n\n",
                        parse_mode="HTML"
                    )
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                await add_or_update_user(
                    user_id=callback.from_user.id,
                    username=random_username,
                    subscription_type="–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏",
                    is_admin=False,
                    balance=0,
                    subscription_end=None
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            kb = InlineKeyboardBuilder()
            kb.button(text="üåê –ö—É–ø–∏—Ç—å VPN", callback_data="connection")
            kb.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
            kb.button(text="üìñ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="instruction")
            kb.button(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite")
            kb.button(text="üÜò –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN?", callback_data="troubleshoot")
            kb.adjust(1, 2, 1, 1)
            
            try:
                await callback.message.answer_photo(
                    photo=types.FSInputFile("handlers/images/07.jpg"),
                    caption="üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!</b>\n\n"
                            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=kb.as_markup(),
                    parse_mode="HTML"
                )

                kb_2 = InlineKeyboardBuilder()
                kb_2.button(text="–ü–û–õ–£–ß–ò–¢–¨", callback_data="connection")
                kb_2.adjust(1)        
                welcome_text = (
                    f"üëã <b>–ü—Ä–∏–≤–µ—Ç, {callback.from_user.username or '–ë–µ–∑ username'}!</b>\n\n"
                    "üéÅ <b>–ü–æ–¥–∫–ª—é—á–∏—Å—å –∫ VPN –±–µ—Å–ø–ª–∞—Ç–Ω–æ!</b>\n"
                    "‚îî –î–∞—Ä–∏–º —Ç–µ–±–µ <b>3 –¥–Ω—è</b> –ø—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø–∞\n\n"
                    "‚ú® <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞—à–µ–≥–æ VPN:</b>\n"
                    "‚îú üöÄ –ú–æ–ª–Ω–∏–µ–Ω–æ—Å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å\n"
                    "‚îú üõ° –ü–æ–ª–Ω–∞—è –∑–∞—â–∏—Ç–∞ –¥–∞–Ω–Ω—ã—Ö\n"
                    "‚îú üîì –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n"
                    "‚îú üí≥ –£–¥–æ–±–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∞–º–∏ –†–§\n"
                    "‚îî üí∞ –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ\n\n"
                    "ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:</b>\n"
                    "‚îî –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π:\n"
                    "   ‚Ä¢ 50‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                    "   ‚Ä¢ 30% —Å–æ –≤—Å–µ—Ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π\n\n"
                    "üì± <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:</b>\n"
                    "‚îî iOS, Android, MacOS –∏ Windows\n\n"
                    "‚¨áÔ∏è <b>–ñ–º–∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!</b> ‚¨áÔ∏è"
                )
                await callback.message.answer_photo(
                    photo=types.FSInputFile("handlers/images/04.jpg"),
                    caption=welcome_text,
                    reply_markup=kb_2.as_markup(),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"Error sending welcome messages: {e}")
        else:
            # –î–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            kb = InlineKeyboardBuilder()
            kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
            kb.adjust(1)
            await callback.message.answer(
                "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞</b>\n\n"
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )

        await state.clear()

    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await state.clear()
    kb = InlineKeyboardBuilder()
    kb.button(text="üåê –ö—É–ø–∏—Ç—å VPN", callback_data="connection")
    kb.button(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
    kb.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    kb.button(text="üìñ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="instruction")
    kb.button(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite")
    kb.button(text="üÜò –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN?", callback_data="troubleshoot")
    kb.adjust(1, 1, 2, 1, 1)

    menu_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
        "üöÄ –û–±—Ö–æ–¥–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ª—é–±–∏–º–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.\n\n"
        "üìñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/07.jpg"),
            caption=menu_text
        )
    )
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    await callback.answer()

@router.message(F.text == "‚óÄÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
async def open_menu_command(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã "‚óÄÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é"
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await state.clear()
    kb = InlineKeyboardBuilder()
    kb.button(text="üåê –ö—É–ø–∏—Ç—å VPN", callback_data="connection")
    kb.button(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
    kb.button(text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    kb.button(text="üìñ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data="instruction")
    kb.button(text="ü§ù –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="invite")
    kb.button(text="üÜò –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN?", callback_data="troubleshoot")
    kb.adjust(1, 1, 2, 1, 1)

    menu_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!\n\n"
        "üöÄ –û–±—Ö–æ–¥–∏—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –ø–æ–ª—É—á–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –ª—é–±–∏–º–æ–º—É –∫–æ–Ω—Ç–µ–Ω—Ç—É –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –±—ã—Å—Ç—Ä–æ–π —Å–∫–æ—Ä–æ—Å—Ç—å—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.\n\n"
        "üìñÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    await message.answer_photo(
        photo=types.FSInputFile("handlers/images/07.jpg"),
        caption=menu_text,
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.message(Command("profile"))
async def profile_command_handler(message: Message, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile
    """
    await state.clear()
    channel_id = CHANNEL
    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=message.from_user.id)
        is_subscribed = member.status not in ["left", "kicked", "banned"]
        
        if not is_subscribed:
            kb = InlineKeyboardBuilder()
            kb.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
            kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            kb.adjust(1)
            
            await message.answer(
                "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"‚Ä¢ {channel_id}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª\n\n"
                "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç–æ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º:\n"
                "https://telegra.ph/Polzovatelskoe-soglashenie-11-15-12\n\n",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            return
    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    user = await get_user(user_id=message.from_user.id)
    keys_count = await get_keys_count(message.from_user.id)
    
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üåê –ö—É–ø–∏—Ç—å VPN", callback_data="connection")
    kb.button(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
    kb.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")
    kb.button(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promocode")
    kb.button(text="üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="active_keys")
    kb.button(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    kb.adjust(1, 1, 1)
    
    profile_text = (
        "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username or '–ë–µ–∑ username'}\n"
        f"üÜî ID: <code>{message.from_user.id}</code>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{user['balance']:,}‚ÇΩ</b>\n"
        f"ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{user.get('referral_count', 0)}</b>\n"
        f"üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: <b>{keys_count}</b>\n\n"
    )
    
    await message.answer_photo(
        photo=types.FSInputFile("handlers/images/02.jpg"),
        caption=profile_text,
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "promocode")
async def promocode_command(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="profile")
    kb.adjust(1)
    
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/11.jpg"),
            caption="üéÅ <b>–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n\n"
                "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>",
        )
    )
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    await state.set_state(PromoCodeState.waiting_for_promocode)

@router.message(PromoCodeState.waiting_for_promocode)
async def process_promocode(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
    """
    promocode = message.text.strip().upper()

    if await check_user_used_promocode(message.from_user.id, promocode):
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="promocode")
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        kb.adjust(1)
        
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω</b>\n\n"
            "–í—ã —Ä–∞–Ω–µ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        await state.clear()
        return
        
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    promo_data = await get_promocode(promocode)
    
    if promo_data:
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
        promo_id, promo_code, promo_user_id, promo_amount, gift_balance, gift_days, expiration_date = promo_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
        current_time = datetime.now()
        expiration_date = datetime.fromisoformat(expiration_date)
        
        if current_time <= expiration_date:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –µ—â–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
            if promo_amount > 0:
                user = await get_user(user_id=message.from_user.id)
                
                kb = InlineKeyboardBuilder()

                
                # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å—ã
                new_balance = user['balance'] + gift_balance
                await update_balance(message.from_user.id, new_balance)
                
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
                await update_promocode_amount(promo_id)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∞–ª–∞–Ω—Å –∏ –¥–Ω–∏
                if gift_balance > 0 and gift_days > 0:
                    kb.button(text="üåê –ü–æ–ª—É—á–∏—Ç—å VPN", callback_data="connection")
                    await set_free_keys_count(message.from_user.id, 1)
                    await add_promocode_days(message.from_user.id, gift_days)
                    
                    await message.answer(
                        "‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                        f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å–∞: {gift_balance}‚ÇΩ\n"
                        f"üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ\n"
                        f"üï∞ –î–Ω–µ–π VPN: {gift_days}\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!",
                        reply_markup=kb.as_markup(),
                        parse_mode="HTML"
                    )
                elif gift_balance > 0:
                    kb.button(text="‚óÄÔ∏è –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
                    await message.answer(
                        "‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                        f"üí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–∞–Ω—Å–∞: {gift_balance}‚ÇΩ\n"
                        f"üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}‚ÇΩ",
                        reply_markup=kb.as_markup(),
                        parse_mode="HTML"
                    )
                elif gift_days > 0:
                    kb.button(text="üåê –ö—É–ø–∏—Ç—å VPN", callback_data="connection")
                    await set_free_keys_count(message.from_user.id, 1)
                    await add_promocode_days(message.from_user.id, gift_days)
                    
                    await message.answer(
                        "‚úÖ <b>–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                        f"üï∞ –î–Ω–µ–π VPN: {gift_days}\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è!",
                        reply_markup=kb.as_markup(),
                        parse_mode="HTML"
                    )
                await add_used_promocode(message.from_user.id, promocode)
            else:
                kb = InlineKeyboardBuilder()
                kb.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="promocode")
                kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
                kb.adjust(1)
                
                await message.answer(
                    "‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω</b>\n\n"
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å.\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å.",
                    reply_markup=kb.as_markup(),
                    parse_mode="HTML"
                )
        else:
            kb = InlineKeyboardBuilder()
            kb.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="promocode")
            kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
            kb.adjust(1)
            
            await message.answer(
                "‚ùå <b>–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω</b>\n\n"
                "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —ç—Ç–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç–µ–∫.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
    else:
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="promocode")
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        kb.adjust(1)
        
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥</b>\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω\n"
            "‚Ä¢ –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ñ–∏–ª—å",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
    
    await state.clear()

@router.message(Command("help"))
async def help_command_handler(message: Message, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    channel_id = CHANNEL
    try:
        member = await bot.get_chat_member(
            chat_id=channel_id, user_id=message.from_user.id
        )
        is_subscribed = member.status not in ["left", "kicked", "banned"]

        if not is_subscribed:
            kb = InlineKeyboardBuilder()
            kb.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
            kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            kb.adjust(1)

            await message.answer(
                "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"‚Ä¢ {channel_id}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª\n\n"
                "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç–æ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º:\n"
                "https://telegra.ph/Polzovatelskoe-soglashenie-11-15-12\n\n",
                reply_markup=kb.as_markup(),
                parse_mode="HTML",
            )
            return
    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    kb = InlineKeyboardBuilder()
    kb.button(text="üÜò –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç VPN?", callback_data="troubleshoot")
    kb.adjust(1, 1)

    await message.answer(
        "üí° <b>–ü–æ–º–æ—â—å</b>\n\n", reply_markup=kb.as_markup(), parse_mode="HTML"
    )


@router.message(Command("connect"))
async def connect_command_handler(message: Message, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /connect
    """
    channel_id = CHANNEL
    try:
        member = await bot.get_chat_member(chat_id=channel_id, user_id=message.from_user.id)
        is_subscribed = member.status not in ["left", "kicked", "banned"]
        
        if not is_subscribed:
            kb = InlineKeyboardBuilder()
            kb.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
            kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            kb.adjust(1)
            
            await message.answer(
                "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"‚Ä¢ {channel_id}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª\n\n"
                "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç–æ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º:\n"
                "https://telegra.ph/Polzovatelskoe-soglashenie-11-15-12\n\n",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            return
        else:
            await message.answer("üîì <b>–î–æ—Å—Ç—É–ø –æ—Ç–∫—Ä—ã—Ç</b>\n\n"
                                 "–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –∏ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!\n"
                                 "–ù–∞–ø–∏—à–∏—Ç–µ /start, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –Ω–µ–π –µ—â—ë —Ä–∞–∑")
    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üì± iOS", callback_data="device_ios")
    kb.button(text="ü§ñ Android", callback_data="device_android")
    kb.button(text="üì∫ Android TV", callback_data="device_androidtv")
    kb.button(text="üñ• Windows", callback_data="device_windows")
    kb.button(text="üçé macOS", callback_data="device_mac")
    kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    kb.adjust(2, 2, 1)

    connection_text = (
        "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n"
        "–ú—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
    )

    await message.answer_photo(
        photo=types.FSInputFile("handlers/images/08.jpg"),
        caption=connection_text,
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "instruction")
async def instruction_command(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /instruction
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ–±—â—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    try:
        channel_id = CHANNEL
        member = await bot.get_chat_member(chat_id=channel_id, user_id=callback.from_user.id)
        is_subscribed = member.status not in ["left", "kicked", "banned"]
        
        if not is_subscribed:
            kb = InlineKeyboardBuilder()
            kb.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
            kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            kb.adjust(1)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            await state.set_state(SubscriptionStates.waiting_for_subscription)
            
            await callback.message.answer(
                "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"‚Ä¢ {channel_id}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.\n\n"
                "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç–æ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º:\n"
                "https://telegra.ph/Polzovatelskoe-soglashenie-11-15-12\n\n",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            return

    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    kb = InlineKeyboardBuilder()
    kb.button(text="üì± iOS", callback_data="guide_ios")
    kb.button(text="ü§ñ Android", callback_data="guide_android")
    kb.button(text="üì∫ Android TV", callback_data="guide_androidtv")
    kb.button(text="üñ• Windows", callback_data="guide_windows")
    kb.button(text="üçé macOS", callback_data="guide_mac")
    kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    kb.adjust(2, 2, 1)

    instruction_text = (
        "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é VPN</b>\n\n"
        "üîπ <b>–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n\n"
        "üî∏ <b>–ü–æ—Ä—è–¥–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
        "2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (v2raytun –¥–ª—è iOS –∏ macOS, V2Ray –¥–ª—è Android, Android TV –∏ Windows)\n"
        "3. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–ª—é—á\n"
        "4. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É\n\n"
        "‚ùì –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:"
    )

    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/12.jpg"),
            caption=instruction_text
        )
    )
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("guide_"))
async def device_guide(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    """
    device = callback.data.split("_")[1]
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    device_mapping = {
        'and': 'android',
        'andtv': 'androidtv',
        'tv': 'androidtv',
        'win': 'windows'
    }
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    normalized_device = device_mapping.get(device.lower(), device.lower())

    kb = InlineKeyboardBuilder()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_keys = await get_user_keys(callback.from_user.id)
    
    if not user_keys:
        kb.button(text="üí´ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="connection")

        await callback.message.edit_caption(
            caption="üîë <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.</b>\n\n"
            "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN.",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å —É—á–µ—Ç–æ–º –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
    device_keys = [
        key for key in user_keys 
        if (key[1].lower() == normalized_device or 
            any(key[1].lower().startswith(alias) for alias in device_mapping.keys()))
    ]
    
    if not device_keys:
        kb.button(text="üí´ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="connection")

        await callback.message.edit_caption(
            caption="üîë <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è {normalized_device.upper()}.</b>\n\n"
            "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ'.",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    download_links = {
        "ios": {
            "vless": "https://apps.apple.com/ru/app/v2raytun/id6476628951",
            "shadowsocks": "https://goo.su/rfYop"
        },
        "mac": {
            "vless": "https://apps.apple.com/ru/app/v2raytun/id6476628951",
            "shadowsocks": "https://goo.su/ztVi"
        },
        "windows": {
            "vless": "https://github.com/hiddify/hiddify-next/releases/latest/download/Hiddify-Windows-Setup-x64.exe",
            "shadowsocks": "https://goo.su/jzloMN"
        },
        "android": {
            "vless": "https://play.google.com/store/apps/details?id=com.v2raytun.android&hl=ru",
            "shadowsocks": "https://goo.su/P5f7"
        },
        "androidtv": {
            "vless": "https://play.google.com/store/apps/details?id=tech.simha.androidtvremote",
            "shadowsocks": "https://goo.su/P5f7"
        }
    }
    
    kb.button(text="üì≤ –°–∫–∞—á–∞—Ç—å V2rayTun/Hiddify", url=download_links[device]["vless"])
    kb.adjust(1)
    kb.button(text="üì≤ –°–∫–∞—á–∞—Ç—å Outline", url=download_links[device]["shadowsocks"])
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    if user_keys:
        if device in ["ios", "mac"]:
            kb.button(
                text=f"üîë –ú–æ–∏ –∫–ª—é—á–∏ –¥–ª—è {device.upper()}", 
                callback_data=f"show_keys_{device}"
            )
        elif device in ["android"]:
            kb.button(
                text=f"üîë –ú–æ–∏ –∫–ª—é—á–∏ –¥–ª—è {device.upper()}", 
                callback_data=f"show_keys_{device}"
            )
        elif device in ["androidtv"]:
            kb.button(
                text=f"üîë –ú–æ–∏ –∫–ª—é—á–∏ –¥–ª—è {device.upper()}", 
                callback_data=f"show_keys_{device}"
            )
        elif device in ["windows"]:
            kb.button(
                text=f"üîë –ú–æ–∏ –∫–ª—é—á–∏ –¥–ª—è {device.upper()}", 
                callback_data=f"show_keys_{device}"
                )
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", callback_data="instruction")
    kb.adjust(1)  

    guides = {
        "ios": (
            "üì± <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è iOS:</b>\n\n"
            "<b>–î–ª—è VLESS:</b>\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayTun –∏–∑ App Store\n"
            "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ '+' –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞\n"
            "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞'\n"
            "5Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á\n"
            "6Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ VPN\n\n"
            "<b>–î–ª—è Shadowsocks:</b>\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline\n"
            "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
            "4Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä\n"
            "5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'\n\n"
            "‚úÖ –ì–æ—Ç–æ–≤–æ! VPN –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n"
        ),
        "android": (
            "ü§ñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android:</b>\n\n"
            "<b>–î–ª—è VLESS:</b>\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayTun\n"
            "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ '+' –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞\n"
            "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞'\n"
            "5Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á\n"
            "6Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
            "<b>–î–ª—è Shadowsocks:</b>\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline\n"
            "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
            "4Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä\n"
            "5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'\n\n"
            "‚úÖ –ì–æ—Ç–æ–≤–æ! VPN –ø–æ–¥–∫–ª—é—á–µ–Ω"
        ),
        "androidtv": (
            "ü§ñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Android TV:</b>\n\n"
            "<b>–î–ª—è VLESS:</b>\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ v2raytun –Ω–∞ –ê–Ω–¥—Ä–æ–∏–¥ TV\n"
            "2Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Remote ATV –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –ê–Ω–¥—Ä–æ–∏–¥:\nhttps://play.google.com/store/apps/details?id=tech.simha.androidtvremote\n"
            "3Ô∏è‚É£ –ê–π—Ñ–æ–Ω:\nhttps://apps.apple.com/ru/app/remote-for-android-tv/id1668755298?l=en-GB\n"
            "4Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä—É —á–µ—Ä–µ–∑ Remote ATV'\n"
            "5Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à –∫–ª—é—á –∏–∑ –±–æ—Ç–∞\n"
            "6Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Remote ATV –∏ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –µ–≥–æ\n"
            "7Ô∏è‚É£ –ó–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ v2raytun –Ω–∞ –ê–Ω–¥—Ä–æ–∏–¥ TV\n"
            "8Ô∏è‚É£ –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ -> —Ä—É—á–Ω–æ–π –≤–≤–æ–¥\n"
            "9Ô∏è‚É£ –í —Ç–µ–ª–µ—Ñ–æ–Ω–µ –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≥—Ä–∞—Ñ–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö, –≤—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–µ–µ –∫–ª—é—á –∏ –Ω–∞–∂–∏–º–∞–µ–º –æ–∫–µ–π\n"
            "üîü –ù–∞ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å\n\n"
            "<b>–î–ª—è Shadowsocks:</b>\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline\n"
            "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
            "4Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä\n"
            "5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'\n\n"
            "‚úÖ –ì–æ—Ç–æ–≤–æ! VPN –ø–æ–¥–∫–ª—é—á–µ–Ω"
        ),
        "windows": (
            "üñ• <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è Windows:</b>\n\n"
            "<b>–î–ª—è VLESS:</b>\n"
            "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Hiddify Next\n"
            "2Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ '+' –≤ –≤–µ—Ä—Ö–Ω–µ–º –º–µ–Ω—é\n"
            "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞'\n"
            "5Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á\n"
            "6Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
            "<b>–î–ª—è Shadowsocks:</b>\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline\n"
            "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
            "4Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä\n"
            "5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'\n\n"
            "‚úÖ –ì–æ—Ç–æ–≤–æ! VPN –ø–æ–¥–∫–ª—é—á–µ–Ω"
        ),
        "mac": (
            "üçé <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è macOS:</b>\n\n"
            "<b>–î–ª—è VLESS:</b>\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ V2rayTun\n"
            "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∑–Ω–∞—á–æ–∫ '+' –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞\n"
            "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ '–î–æ–±–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞'\n"
            "5Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á\n"
            "6Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ VPN\n\n"
            "<b>–î–ª—è Shadowsocks:</b>\n"
            "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline\n"
            "2Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É\n"
            "4Ô∏è‚É£ –í—Å—Ç–∞–≤—å—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –∏ –¥–æ–±–∞–≤—å—Ç–µ —Å–µ—Ä–≤–µ—Ä\n"
            "5Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'\n\n"
            "‚úÖ –ì–æ—Ç–æ–≤–æ! VPN –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n"
        )
    }

    await callback.message.answer(
        text=guides.get(device, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"),
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    
    await callback.message.delete()
    await callback.answer()

@router.callback_query(F.data == "invite")
async def invite_command(callback: types.CallbackQuery, bot: Bot, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    """
    try:
        channel_id = CHANNEL
        member = await bot.get_chat_member(chat_id=channel_id, user_id=callback.from_user.id)
        is_subscribed = member.status not in ["left", "kicked", "banned"]
        
        if not is_subscribed:
            kb = InlineKeyboardBuilder()
            kb.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
            kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            kb.adjust(1)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            await state.set_state(SubscriptionStates.waiting_for_subscription)
            
            await callback.message.answer(
                "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"‚Ä¢ {channel_id}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.\n\n"
                "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç–æ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º:\n"
                "https://telegra.ph/Polzovatelskoe-soglashenie-11-15-12\n\n",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            return

    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    user = await get_user(user_id=callback.from_user.id)
    user_id = user['user_id']
    referral_link = f"https://t.me/{(await callback.bot.me()).username}?start=ref_{user_id}"
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    
    invite_text = (
        f"ü§ù <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n\n"
        f"üì¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã:\n"
        f"‚îî 50‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        f"‚îî 30% –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n\n"
        f"üîó <b>–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:</b>\n"
        f"<code>{referral_link}</code>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        f"‚îî –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user.get('referral_count', 0)}\n"
        f"<i>–ë–æ–Ω—É—Å—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ</i>"
    )
    
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/01.jpg"),
            caption=invite_text
        )
    )
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    await callback.answer()

@router.callback_query(F.data == "profile")
async def profile_command(callback: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user = await get_user(user_id=callback.from_user.id)
    email = await get_user_email(callback.from_user.id)

    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", callback_data="pay_manager")
    kb.button(text="üîë –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="active_keys")
    kb.button(text="üéÅ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promocode")
    kb.button(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    kb.adjust(1, 1, 1)
    
    keys_count = await get_keys_count(callback.from_user.id)
    referral_count = await get_referral_count(callback.from_user.id)

    profile_text = (
        "üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username or '–ë–µ–∑ username'}\n"
        f"üÜî ID: <code>{callback.from_user.id}</code>\n"
        f"üí≥ Email: <code>{email if email else '–ù–µ —É–∫–∞–∑–∞–Ω'}</code>\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{format(int(user['balance']), ',')}‚ÇΩ</b>\n"
        f"ü§ù –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: <b>{referral_count}</b>\n"
        f"üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: <b>{keys_count}</b>\n\n"
    )

    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/02.jpg"),
            caption=profile_text
        )
    )

    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())    
    await callback.answer()

@router.callback_query(F.data == "pay_manager")
async def pay_manager(callback: types.CallbackQuery, state: FSMContext):
    pay_manager_text = (
        "üí≥ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
        "‚Ä¢ üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å - –≤–Ω–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å—á—ë—Ç\n"
        "‚Ä¢ üí≥ –ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        "‚Ä¢ ‚öôÔ∏è –ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã - —É–ø—Ä–∞–≤–ª—è—Ç—å –º–µ—Ç–æ–¥–∞–º–∏ –æ–ø–ª–∞—Ç—ã\n"
        "‚Ä¢ üì® –ò–∑–º–µ–Ω–∏—Ç—å email - –¥–ª—è —á–µ–∫–æ–≤ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "<i>–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã –∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.\n"
        "–ß–µ–∫–∏ –æ–± –æ–ø–ª–∞—Ç–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π email.</i>"
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")
    kb.button(text="üí≥ –ú–æ–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏", callback_data="transactions") 
    kb.button(text="‚öôÔ∏è –ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã", callback_data="my_subscriptions")
    kb.button(text="üì® –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="change_email")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    kb.adjust(1, 1, 1)
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/02.jpg"),
            caption=pay_manager_text
        )
    )

    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())    
    await callback.answer()    

@router.callback_query(F.data == "change_email")
async def change_email(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await state.set_state(AccountStates.waiting_for_email)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
    await callback.answer()

@router.message(AccountStates.waiting_for_email)
async def process_new_email(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await save_or_update_email(message.from_user.id, message.text)
    await state.clear()
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
    await message.answer(text="Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", parse_mode="HTML", reply_markup=kb.as_markup())

@router.callback_query(F.data == "my_subscriptions")
async def my_subscriptions(callback: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    payment_methods = await get_user_payment_methods(callback.from_user.id)
    
    kb = InlineKeyboardBuilder()
    
    if payment_methods:
        for method in payment_methods:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            created_date = datetime.fromisoformat(method['created_at']).strftime("%d.%m.%Y")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
            kb.button(
                text=f"üí≥ {method['issuer_name']} –æ—Ç {created_date}",
                callback_data=f"payment_method_{method['id']}"
            )
    else:
        kb.button(text="üîë –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã", callback_data="profile")
        
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
    kb.adjust(1)
    
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/10.jpg"),
            caption="üí≥ <b>–ú–æ–∏ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã</b>\n\n"
                   "–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤–∞—à–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                   "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
        )
    )
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("payment_method_"))
async def payment_method_details(callback: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –∏ –æ–ø—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    """
    method_id = int(callback.data.split("_")[2])
    payment_method = await get_payment_method_by_id(method_id)
    
    if not payment_method:
        await callback.answer("–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        await my_subscriptions(callback)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
    created_date = datetime.fromisoformat(payment_method['created_at']).strftime("%d.%m.%Y %H:%M")
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã", callback_data=f"cancel_payment_method_{method_id}")
    kb.button(text="üîë –°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º", callback_data=f"sync_payment_method_{method_id}")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="my_subscriptions")
    kb.adjust(1)
    
    details_text = (
        f"üí≥ <b>–î–µ—Ç–∞–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã</b>\n\n"
        f"‚îî üÜî ID: <code>{payment_method['id']}</code>\n"
        f"‚îî üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_date}\n\n"
        f"‚ÑπÔ∏è –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –ø–æ–∑–≤–æ–ª—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É VPN.\n"
        f"–î–ª—è –æ—Ç–º–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–£–¥–∞–ª–∏—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã¬ª."
    )
    
    await callback.message.edit_caption(
        caption=details_text,
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("sync_payment_method_"))
async def sync_payment_method(callback: types.CallbackQuery):
    """
    –°–¥–µ–ª–∞—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –æ—Å–Ω–æ–≤–Ω—ã–º
    """
    method_id = int(callback.data.split("_")[3])
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"confirm_sync_payment_method_{method_id}")
    kb.button(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"payment_method_{method_id}")
    kb.adjust(2)
    await callback.message.edit_caption(
        caption="‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏</b>\n\n"
               "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ?\n\n"
               "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_sync_payment_method_"))
async def confirm_sync_payment_method(callback: types.CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    """
    method_id = int(callback.data.split("_")[4])
    try:
        await sync_payment_id_for_all_keys(callback.from_user.id, method_id)
        kb = InlineKeyboardBuilder()    
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"payment_method_{method_id}")
        await callback.message.edit_caption(
            caption="‚úÖ <b>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ</b>\n\n"
                "–¢–µ–ø–µ—Ä—å –æ–Ω –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.\n\n"
                "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –≤—ã –º–æ–∂–µ—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª–µ <b>–ú–æ–∏ –∫–ª—é—á–∏</b>",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data.startswith("cancel_payment_method_"))
async def confirm_cancel_payment_method(callback: types.CallbackQuery):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
    """
    method_id = int(callback.data.split("_")[3])
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_payment_{method_id}")
    kb.button(text="‚ùå –ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"payment_method_{method_id}")
    kb.adjust(2)
    
    await callback.message.edit_caption(
        caption="‚ùì <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
               "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã?\n\n"
               "–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–∞–º –ø—Ä–∏–¥–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É VPN.",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("confirm_cancel_payment_"))
async def cancel_payment_method(callback: types.CallbackQuery, bot: Bot):
    """
    –û—Ç–º–µ–Ω—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    method_id = int(callback.data.split("_")[3])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ç–æ–¥–µ –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        payment_method = await get_payment_method_by_id(method_id)
        
        if not payment_method:
            await callback.answer("–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            await my_subscriptions(callback)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if payment_method['user_id'] != callback.from_user.id:
            await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
            return
        
        # –£–¥–∞–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        success = await delete_payment_method(method_id)
        
        if success:
            kb = InlineKeyboardBuilder()
            kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="my_subscriptions")
            kb.adjust(1)
            
            await callback.message.edit_caption(
                caption="‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
                       "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.\n"
                       "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            await send_info_for_admins(
                f"[–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É–¥–∞–ª–∏–ª –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã ID: {method_id}",
                await get_admins(),
                bot,
                username=callback.from_user.username
            )
        else:
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        await send_info_for_admins(
            f"[–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, –æ—à–∏–±–∫–∞: {e}",
            await get_admins(),
            bot,
            username=callback.from_user.username
        )
    
    await callback.answer()



@router.callback_query(F.data == "transactions")
async def get_transactions(callback: types.CallbackQuery, bot: Bot):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
    """
    transactions = await get_user_transactions(callback.from_user.id)
    kb = InlineKeyboardBuilder()
    
    if transactions:
        for tx in transactions:
            status_emoji = {
                'pending': '‚è≥',
                'succeeded': '‚úÖ',
                'failed': '‚ùå',
                'cancelled': 'üö´'
            }.get(tx['status'], '‚ùì')
            
            kb.button(
                text=f"{status_emoji} {tx['amount']}‚ÇΩ - {tx['created_at'][:16]}",
                callback_data=f"transaction_{tx['transaction_id']}"
            )
    else:
        kb.button(text="–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data="profile")
        
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")
    kb.adjust(1)
    
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/10banner.png"),
            caption="üí≥ <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"
        )
    )
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())    
    await callback.answer()

@router.callback_query(F.data.startswith("transaction_"))
async def show_transaction_details(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    transaction_id = callback.data.split('_')[1]
    transactions = await get_user_transactions(callback.from_user.id)
    transaction = next((tx for tx in transactions if tx['transaction_id'] == transaction_id), None)
    
    if not transaction:
        await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    status_emoji = {
        'pending': '‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'succeeded': '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ',
        'failed': '‚ùå –û—à–∏–±–∫–∞',
        'cancelled': 'üö´ –û—Ç–º–µ–Ω–µ–Ω–æ'
    }.get(transaction['status'], '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    
    details = (
        f"üí≥ <b>–î–µ—Ç–∞–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏</b>\n\n"
        f"‚îî üÜî ID: <code>{transaction['transaction_id']}</code>\n"
        f"‚îî üí∞ –°—É–º–º–∞: {transaction['amount']}‚ÇΩ\n"
        f"‚îî ‚è± –î–∞—Ç–∞: {transaction['created_at']}\n"
        f"‚îî üìä –°—Ç–∞—Ç—É—Å: {status_emoji}"
    )
    
    kb = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è pending —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    if transaction['status'] == 'pending':
        await state.update_data(transaction_id=transaction['transaction_id'], amount=transaction['amount'])
        kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="check_transaction")
        
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="transactions")
    kb.adjust(1)
    
    await callback.message.edit_caption(
        caption=details,
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "check_transaction")
async def check_user_transaction(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    """
    data = await state.get_data()
    kb = InlineKeyboardBuilder()
    try:
        transaction_id = data.get('transaction_id')
        amount = data.get("amount")
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –∏–∑ –ë–î
        current_transaction = await get_transaction_by_id(transaction_id)
        if not current_transaction:
            await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        new_status, payment = await check_transaction_status(transaction_id)
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ —ç—Ç–æ –Ω–µ pending, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if current_transaction['status'] == new_status and new_status != 'pending':
            await callback.answer("–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è", show_alert=True)
            return
        status_info = {
            'pending': {
                'emoji': '‚è≥',
                'text': '–ü–ª–∞—Ç—ë–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ',
                'description': '–û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...'
            },
            'succeeded': {
                'emoji': '‚úÖ',
                'text': '–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω',
                'description': '–°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!'
            },
            'failed': {
                'emoji': '‚ùå',
                'text': '–ü–ª–∞—Ç—ë–∂ –Ω–µ —É–¥–∞–ª—Å—è',
                'description': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.'
            },
            'cancelled': {
                'emoji': 'üö´',
                'text': '–ü–ª–∞—Ç—ë–∂ –æ—Ç–º–µ–Ω–µ–Ω',
                'description': '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.'
            }
        }.get(new_status, {
            'emoji': '‚ùå',
            'text': '–ü–ª–∞—Ç—ë–∂ –∏—Å—Ç–µ–∫',
            'description': '–í—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑.'
        })
        message_text = (
            f"{status_info['emoji']} <b>{status_info['text']}</b>\n\n"
            f"‚îî üÜî ID: <code>{transaction_id}</code>\n"
            f"‚îî üí∞ –°—É–º–º–∞: {amount}‚ÇΩ\n"
            f"‚îî üìù {status_info['description']}"
        )
        buttons = []
        if new_status == 'pending':
            buttons = [
                ("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", "check_transaction"),
                ("üí≠ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support"),
                (" –ù–∞–∑–∞–¥", "transactions")

            ]
        elif "succeeded" not in new_status:
            buttons = [
                ("üí≥ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "add_funds"),
                ("üí≠ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "support"),
                (" –ù–∞–∑–∞–¥", "transactions")
            ]
        elif new_status == 'succeeded':
            if current_transaction['status'] != 'succeeded':
                await update_transaction_status(transaction_id=transaction_id, new_status="succeeded")
                await update_balance(callback.from_user.id, amount)

                if payment: 
                    user = await get_user(user_id=callback.from_user.id)
                    first_deposit = await get_is_first_payment_done(user['user_id'])

                    if payment.payment_method.saved:
                        if not first_deposit:
                            await sync_payment_id_for_all_keys(user['user_id'], payment.payment_method.id)

                        await bot.send_message(callback.from_user.id, "üí≥ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                                               f"üí≥ <b>–°—É–º–º–∞:</b> {amount}‚ÇΩ\n\n"
                                               "üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.\n\n"
                                               "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã",
                                               parse_mode="HTML",
                                               reply_markup=kb.as_markup()
                                               )        
                        await state.update_data(saved_id=payment.payment_method.id)
                        await state.set_state(SubscriptionStates.waiting_for_payment_method_name)
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
                if user['referrer_id']:
                    referrer = await get_user(user_id=user['referrer_id'])

                    bonus_percentage = 0.5 if first_deposit else 0.3
                    await update_balance(referrer['user_id'], int(referrer['balance']) + int(amount) * bonus_percentage)

                    try:
                        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                        await bot.send_message(
                            user['referrer_id'],
                            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                            f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ\n"
                            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: <b>{int(amount) * bonus_percentage}‚ÇΩ</b> ({bonus_percentage * 100}%)",
                            parse_mode="HTML",
                            reply_markup=kb.as_markup()
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")
                        await send_info_for_admins(f"[–ÆKassa. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}", await get_admins(), bot, username=referrer.get("username"))

                await callback.answer("–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!", show_alert=True)
                buttons.append(("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º", "transactions"))
        for text, callback_data in buttons:
            kb.button(text=text, callback_data=callback_data)
        kb.adjust(1)
        try:
            await callback.message.edit_caption(
                caption=message_text,
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
        except Exception as e:
            if "message is not modified" in str(e):
                await callback.answer("–°—Ç–∞—Ç—É—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è")
            else:
                raise
    except Exception as e:
        error_message = (
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        kb = InlineKeyboardBuilder()
        kb.button(text="üí≠ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="transactions")
        kb.adjust(1)
        await callback.message.edit_caption(
            caption=error_message,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        await send_info_for_admins(
            f"[–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏] –û—à–∏–±–∫–∞: {e}",
            await get_admins(),
            bot,
            username=callback.from_user.username
        )
        await callback.answer()


@router.callback_query(F.data == "active_keys")
async def active_keys(callback: types.CallbackQuery, bot: Bot):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–ª—é—á–µ–π
    """
    try:
        user_keys = await get_user_keys(callback.from_user.id)
        kb = InlineKeyboardBuilder()
        if not user_keys:
            kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=FSInputFile("handlers/images/09.jpg"),
                    caption="üîë <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏</b>\n\n–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π."
                )
            )
            await callback.message.edit_reply_markup(reply_markup=kb.as_markup()) 
            return

        device_counts = {}
        for key in user_keys:
            original_device = key[1].lower()
            
            # –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ–Ω (–æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º)
            replacements = [
                ("andtv", "androidtv"),
                ("androidtv", "androidtv"),
                ("and", "android"),
                ("win", "windows"),
                ("tv", "androidtv")  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–º–µ–Ω–∞
            ]
            
            # –ü–æ–∏—Å–∫ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            normalized_device = next(
                (v for k, v in replacements if original_device.startswith(k)),
                original_device
            )
            
            device_counts[normalized_device] = device_counts.get(normalized_device, 0) + 1

        devices = {
            "ios": "üì± iOS",
            "androidtv": "üì∫ Android TV",
            "android": "ü§ñ Android",
            "windows": "üñ• Windows",
            "mac": "üçé macOS",
        }

        for device_key, count in device_counts.items():
            if device_key in devices:
                kb.button(
                    text=f"{devices[device_key]} ({count})",
                    callback_data=f"show_keys_{device_key}"
                )
                
        kb.button(text="üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª—é—á", callback_data="key_settings")
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        kb.adjust(1)
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=FSInputFile("handlers/images/09.jpg"),
                caption="üîë <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–ª—é—á–µ–π:</b>",
            )
        ) 
        await callback.message.edit_reply_markup(reply_markup=kb.as_markup())

    except Exception as e:
        logger.error(f"Error in active_keys: {e}")
        await send_info_for_admins(
            f"[–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏] –û—à–∏–±–∫–∞: {e}",
            await get_admins(),
            bot,
            username=callback.from_user.username
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.callback_query(F.data == "key_settings")
async def key_settings(callback: types.CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üîÑ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
    kb.button(text="üîÑ –ó–∞–º–µ–Ω–∏—Ç—å –∫–ª—é—á", callback_data="replace_key")
    kb.button(text="üåç –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data="change_key_country")
    kb.button(text="üì° –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª", callback_data="change_key_protocol")
    kb.button(text="üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞", callback_data="change_key_name")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="active_keys")
    kb.adjust(1)
    
    await callback.message.edit_caption(
        caption=(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
            "üîÑ <b>–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>\n"
            "‚îî –ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫–ª—é—á–∞\n\n"
            "üîÑ <b>–ó–∞–º–µ–Ω–∏—Ç—å –∫–ª—é—á</b>\n"
            "‚îî –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á –≤–∑–∞–º–µ–Ω —Ç–µ–∫—É—â–µ–≥–æ\n\n"
            "üåç <b>–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É</b>\n"
            "‚îî –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
            "üì° <b>–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª</b>\n"
            "‚îî –°–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n\n"
            "üìù <b>–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞</b>\n"
            "‚îî –ó–∞–¥–∞—Ç—å —Å–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞\n\n"
        ),
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()




@router.callback_query(F.data == "change_key_name")
async def change_key_name(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
    """
    user_keys = await get_user_keys(callback.from_user.id)
    
    if not user_keys:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="key_settings")
        await callback.message.edit_caption(
            caption="‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π</b>\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=kb.as_markup()
        )
        return
    
    kb = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
    for key_data in user_keys:
        key = key_data[0]            # key
        device_id = key_data[1]      # device_id
        expiration_date = key_data[2] # expiration_date
        name = key_data[3]           # name
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
        protocol = 'Shadowsocks' if key.startswith('ss://') else 'VLESS'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        if name:
            display_name = f"¬´{name}¬ª"  # –í—ã–¥–µ–ª—è–µ–º –∏–º—è –∫–ª—é—á–∞ –∫–∞–≤—ã—á–∫–∞–º–∏
        else:
            # –ï—Å–ª–∏ –∏–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ, –∏–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –∫–ª—é—á–∞
            display_name = "–ö–ª—é—á"
            if "#Atlanta%20VPN-" in key:
                display_name = key.split("#Atlanta%20VPN-")[1]
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ –¥–ª—è callback_data
        short_key_id = hashlib.md5(key.encode()).hexdigest()[:10]
        kb.button(
            text=f"üîë {device_id.upper()} - {protocol} - {display_name}", 
            callback_data=f"select_name_key_{short_key_id}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        await state.update_data({
            f"name_key_{short_key_id}": key
        })
    
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="key_settings")
    kb.adjust(1)
    
    await callback.message.edit_caption(
        caption="üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("select_name_key_"))
async def select_key_for_name_change(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª—é—á–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏
    """
    key_id = callback.data.split("_")[-1]
    user_data = await state.get_data()
    key = user_data.get(f"name_key_{key_id}")
    
    if not key:
        await callback.answer("–û—à–∏–±–∫–∞: –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º –∫–ª—é—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    await state.update_data({"selected_key_for_name": key})
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="change_key_name")
    
    await callback.message.edit_caption(
        caption="üìù <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞.\n"
        "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 20 —Å–∏–º–≤–æ–ª–æ–≤.",
        reply_markup=kb.as_markup()
    )
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
    await state.set_state(KeyNameStates.waiting_for_new_name)

@router.message(KeyNameStates.waiting_for_new_name)
async def process_new_key_name(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –∫–ª—é—á–∞
    """
    new_name = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏
    if len(new_name) > 20:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –∏–º—è –∫–ª—é—á–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤.\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    key = user_data.get("selected_key_for_name")
    
    if not key:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –∫–ª—é—á–∞ –≤ –ë–î
    success = await update_key_name(key, new_name)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="key_settings")
    
    if success:
        await message.answer_photo(
            photo=FSInputFile("handlers/images/09.jpg"),
            caption=f"‚úÖ <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ</b>\n\n"
                    f"–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: <b>{new_name}</b>",
            reply_markup=kb.as_markup()
        )
    else:
        await message.answer_photo(
            photo=FSInputFile("handlers/images/09.jpg"),
            caption="‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=kb.as_markup()
        )
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

@router.callback_query(F.data == "change_key_protocol")
async def change_key_protocol(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    """
    user_keys = await get_user_keys(callback.from_user.id)
    
    if not user_keys:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="key_settings")
        await callback.message.edit_caption(
            caption="‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π</b>\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=kb.as_markup()
        )
        return
    
    kb = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–ª—é—á–µ–π Shadowsocks (—Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Å–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ SS -> VLESS)
    shadowsocks_keys = []
    for key_data in user_keys:
        key = key_data[0]            # key
        device_id = key_data[1]      # device_id
        expiration_date = key_data[2] # expiration_date
        name = key_data[3]           # name
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
        protocol = 'Shadowsocks' if key.startswith('ss://') else 'VLESS'
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–∏ Shadowsocks –¥–ª—è —Å–º–µ–Ω—ã –Ω–∞ VLESS
        if protocol == 'Shadowsocks':
            shadowsocks_keys.append(key_data)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
            if name:
                display_name = f"¬´{name}¬ª"  # –í—ã–¥–µ–ª—è–µ–º –∏–º—è –∫–ª—é—á–∞ –∫–∞–≤—ã—á–∫–∞–º–∏
            else:
                # –ï—Å–ª–∏ –∏–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ, –∏–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –∫–ª—é—á–∞
                display_name = "–ö–ª—é—á"
                if "#Atlanta%20VPN-" in key:
                    display_name = key.split("#Atlanta%20VPN-")[1]
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ –¥–ª—è callback_data
            key_id = hashlib.md5(key.encode()).hexdigest()[:10]
            kb.button(
                text=f"üîë {device_id.upper()} - {protocol} - {display_name}", 
                callback_data=f"select_protocol_key_{key_id}"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            await state.update_data({f"protocol_key_{key_id}": key})
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á–∏ Shadowsocks –¥–ª—è —Å–º–µ–Ω—ã
    if not shadowsocks_keys:
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="key_settings")
        await callback.message.edit_caption(
            caption="‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è —Å–º–µ–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</b>\n\n"
            "–°–º–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å Shadowsocks –Ω–∞ VLESS, –ø–æ –ø—Ä–∏—á–∏–Ω–µ –º–∞—Å—Å–æ–≤–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏.\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π Shadowsocks.",
            reply_markup=kb.as_markup()
        )
        return
    
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="key_settings")
    kb.adjust(1)
    
    await callback.message.edit_caption(
        caption="üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</b>\n\n"
        "–î–æ—Å—Ç—É–ø–Ω–∞ —Å–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Å Shadowsocks –Ω–∞ VLESS.\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, –ø—Ä–æ—Ç–æ–∫–æ–ª –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("select_protocol_key_"))
async def select_key_for_protocol_change(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª—é—á–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    """
    key_id = callback.data.split("_")[3]
    user_data = await state.get_data()
    key = user_data.get(f"protocol_key_{key_id}")
    
    if not key:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    protocol = 'Shadowsocks' if key.startswith('ss://') else 'VLESS'
    new_protocol = 'VLESS' if key.startswith('ss://') else 'Shadowsocks'
    
    kb = InlineKeyboardBuilder()
    kb.button(
        text=f"‚úÖ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ {new_protocol}", 
        callback_data=f"confirm_protocol_change_{key_id}"
    )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="change_key_protocol")
    kb.adjust(1)
    
    await callback.message.edit_caption(
        caption=f"üîÑ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª: <b>{protocol}</b>\n"
        f"–ù–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: <b>{new_protocol}</b>\n\n"
        f"‚ùóÔ∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –ü–æ—Å–ª–µ —Å–º–µ–Ω—ã –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –≤–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å VPN –∫–ª–∏–µ–Ω—Ç "
        f"—Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º. –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=kb.as_markup()
    )


@router.callback_query(F.data.startswith("confirm_protocol_change_"))
async def process_protocol_change(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –∫–ª—é—á–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é:
    1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å –Ω–æ–≤—ã–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
    2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    3. –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
    4. –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª—é—á
    """
    key_id = callback.data.split("_")[3]
    user_data = await state.get_data()
    key = user_data.get(f"protocol_key_{key_id}")
    
    if not key:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_caption(
            caption="‚è≥ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</b>\n\n"
            "–°–æ–∑–¥–∞–µ–º –¥–ª—è –≤–∞—Å –Ω–æ–≤—ã–π –∫–ª—é—á —Å –¥—Ä—É–≥–∏–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∞
        current_protocol = 'ss' if key.startswith('ss://') else 'vless'
        device, unique_id, unique_uuid, address, parts = extract_key_data(key)
        old_expiry_time = await get_key_expiry_date(key)
        server = await get_server_by_address(address, protocol="shadowsocks" if current_protocol == 'ss' else "vless")
        
        if not server:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞")
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–º –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
        api, server_address, pbk, sid, sni, port, utls, new_protocol, country, inbound_id = await get_api_instance(
            country=server['country'],
            use_shadowsocks=(current_protocol == 'vless')  # –ú–µ–Ω—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–∞ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã–π
        )
        
        await send_info_for_admins(
            f"[–ö–æ–Ω—Ç—Ä–æ–ª—å –°–µ—Ä–≤–µ—Ä–∞, –§—É–Ω–∫—Ü–∏—è: process_protocol_change]\n–ù–∞–π–¥–µ–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:\n{server_address},\n{pbk},\n{sid}\n{sni}... ",
            await get_admins(),
            bot,
            username=callback.from_user.username
        )
        
        await api.login()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ email –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        random_part = ''.join(random.choice(string.ascii_lowercase) for _ in range(4))
        unique_email = f"{parts[0]}_{random_part}_{parts[2]}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        if current_protocol == 'vless':  # –ú–µ–Ω—è–µ–º VLESS –Ω–∞ Shadowsocks
            method = "chacha20-ietf-poly1305"
            password = generate_random_string(32)
            new_client = Client(
                id=generate_random_string(8),
                email=unique_email,
                password=password,
                method=method,
                enable=True,
                expiry_time=old_expiry_time
            )
        else:  # –ú–µ–Ω—è–µ–º Shadowsocks –Ω–∞ VLESS
            new_uuid = str(uuid.uuid4())
            new_client = Client(
                id=new_uuid,
                email=unique_email,
                enable=True,
                expiry_time=old_expiry_time,
                flow="xtls-rprx-vision"
            )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        await api.client.add(inbound_id, [new_client])
        server_address_base = server_address.split(':')[0]
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
        if current_protocol == 'vless':  # –°–æ–∑–¥–∞–µ–º Shadowsocks –∫–ª—é—á
            ss_config = f"{method}:{password}"
            encoded_config = base64.urlsafe_b64encode(ss_config.encode()).decode().rstrip('=')
            new_key = f"ss://{encoded_config}@{server_address_base}:{port}?type=tcp#Atlanta%20VPN-{new_client.email}"
        else:  # –°–æ–∑–¥–∞–µ–º VLESS –∫–ª—é—á
            new_key = (
                f"vless://{new_uuid}@{server_address_base}:{port}"
                "?type=tcp&security=reality"
                f"&pbk={pbk}"
                f"&fp={utls}&sni={sni}&sid={sid}&spx=%2F"
                f"&flow=xtls-rprx-vision#Atlanta%20VPN-{new_client.email}"
            )
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        new_client_check = await api.client.get_by_email(new_client.email)
        if not new_client_check:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await add_active_key(callback.from_user.id, new_key, device, old_expiry_time, device)
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        clients_count = await get_server_count_by_address(
            server_address_base, inbound_id, 
            protocol="shadowsocks" if new_protocol == 'ss' else "vless"
        )
        await update_server_clients_count(server_address_base, clients_count + 1, inbound_id)
        
        # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –∫–ª—é—á–µ
        kb = InlineKeyboardBuilder()
        kb.button(text="üìñ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data=f"guide_{device}")
        kb.button(text="üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="active_keys")
        kb.button(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–∞", callback_data="key_settings")
        kb.adjust(1)
        
        new_protocol_name = "Shadowsocks" if current_protocol == 'vless' else "VLESS"
        await callback.message.edit_caption(
            caption=f"‚úÖ <b>–ü—Ä–æ—Ç–æ–∫–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_protocol_name}!</b>\n\n"
            f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}\n"
            f"üîë –ù–æ–≤—ã–π –∫–ª—é—á:\n<code>{new_key}</code>\n\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n"
            "–°—Ç–∞—Ä—ã–π –∫–ª—é—á —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=kb.as_markup()
        )
        
        logger.info(f"New key with protocol {new_protocol_name} created for user {callback.from_user.id}")
        
        # 6. –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–ª—é—á (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
            old_server = await get_server_by_address(
                address, 
                protocol="shadowsocks" if current_protocol == 'ss' else "vless"
            )
            
            if old_server:
                old_api = AsyncApi(
                    f"http://{old_server['address']}",
                    old_server['username'],
                    old_server['password'],
                    use_tls_verify=False
                )
                await old_api.login()
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                if current_protocol == 'ss':
                    await old_api.client.delete(
                        inbound_id=old_server['inbound_id'], 
                        client_uuid=f"{parts[0]}_{parts[1]}_{parts[2]}"
                    )
                else:
                    await old_api.client.delete(
                        inbound_id=old_server['inbound_id'], 
                        client_uuid=str(unique_uuid)
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–µ
                old_clients_count = await get_server_count_by_address(
                    address, 
                    old_server['inbound_id'], 
                    protocol="shadowsocks" if current_protocol == 'ss' else "vless"
                )
                await update_server_clients_count(
                    address, 
                    old_clients_count - 1, 
                    old_server['inbound_id']
                )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await remove_key_bd(key)
            logger.info(f"Old key successfully removed for user {callback.from_user.id}")
            
        except Exception as delete_error:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ—ë,
            # –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –Ω–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.error(f"Error deleting old key: {delete_error}. Key might remain active.")
            await send_info_for_admins(
                f"[–°–º–µ–Ω–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {delete_error}",
                await get_admins(),
                bot,
                username=callback.from_user.username
            )
            
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
        logger.error(f"Error changing protocol: {str(e)}", exc_info=True)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="change_key_protocol")
        kb.button(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–∞", callback_data="key_settings")
        kb.button(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        kb.adjust(1)
        
        await callback.message.edit_caption(
            caption="‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞</b>\n\n"
            f"{str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=kb.as_markup()
        )
    
    finally:
        await state.clear()



@router.callback_query(F.data == "change_key_country")
async def change_key_country(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
    """
    user_keys = await get_user_keys(callback.from_user.id)
    
    if not user_keys:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        await callback.message.edit_caption(
            caption="‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π</b>\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=kb.as_markup()
        )
        return
    
    kb = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
    for key_data in user_keys:
        key = key_data[0]            # key
        device_id = key_data[1]      # device_id
        expiration_date = key_data[2] # expiration_date
        name = key_data[3]           # name
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        if name:
            display_name = f"¬´{name}¬ª"  # –í—ã–¥–µ–ª—è–µ–º –∏–º—è –∫–ª—é—á–∞ –∫–∞–≤—ã—á–∫–∞–º–∏
        else:
            # –ï—Å–ª–∏ –∏–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ, –∏–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –∫–ª—é—á–∞
            display_name = "–ö–ª—é—á"
            if "#Atlanta%20VPN-" in key:
                display_name = key.split("#Atlanta%20VPN-")[1]
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç—Ä–∞–Ω–µ –∏–∑ –∫–ª—é—á–∞
        protocol = 'ss' if key.startswith('ss://') else 'vless'
        _, _, _, address, _ = extract_key_data(key)
        server = await get_server_by_address(address, protocol="shadowsocks" if protocol == 'ss' else "vless")
        country = server.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if server else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ –¥–ª—è callback_data
        key_id = hashlib.md5(key.encode()).hexdigest()[:10]
        kb.button(
            text=f"üîë {device_id.upper()} - {display_name} ({country})", 
            callback_data=f"select_country_key_{key_id}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        await state.update_data({f"country_key_{key_id}": key})
    
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="key_settings")
    kb.adjust(1)
    
    await callback.message.edit_caption(
        caption="üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, —Å—Ç—Ä–∞–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=kb.as_markup()
    )


@router.callback_query(F.data.startswith("select_country_key_"))
async def select_key_for_country_change(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª—é—á–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
    """
    key_id = callback.data.split("_")[3]
    user_data = await state.get_data()
    key = user_data.get(f"country_key_{key_id}")
    
    if not key:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    protocol = 'ss' if key.startswith('ss://') else 'vless'
    device, unique_id, unique_uuid, address, parts = extract_key_data(key)
    server = await get_server_by_address(address, protocol="shadowsocks" if protocol == 'ss' else "vless")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
    countries = await get_available_countries(protocol=protocol)
    kb = InlineKeyboardBuilder()
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç—Ä–∞–Ω—ã, –∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â—É—é
    current_country = server['country']
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω—ã, –æ—Ç–ª–∏—á–Ω—ã–µ –æ—Ç —Ç–µ–∫—É—â–µ–π
    available_countries = []
    for country in countries:
        if country['name'] != current_country:
            kb.button(
                text=f"{country['name']}", 
                callback_data=f"country_change_{key_id}_{country['code']}"
            )
            available_countries.append(country['name'])
    
    if not available_countries:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="change_key_country")
        await callback.message.edit_caption(
            caption="‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è</b>\n\n"
            f"–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∞: <b>{current_country}</b>\n\n"
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –≤—ã–±–æ—Ä–∞.",
            reply_markup=kb.as_markup()
        )
        return
    
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="change_key_country")
    kb.adjust(1)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.update_data(
        country_key=key,
        current_country=current_country,
        device=device
    )
    
    await callback.message.edit_caption(
        caption=f"üåç <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã</b>\n\n"
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}\n"
        f"üåê –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∞: <b>{current_country}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω—É –¥–ª—è –∫–ª—é—á–∞:",
        reply_markup=kb.as_markup()
    )


@router.callback_query(F.data.startswith("country_change_"))
async def process_country_change(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –∫–ª—é—á–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é:
    1. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
    2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    3. –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
    4. –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤—ã–π –∫–ª—é—á
    """
    key_id = callback.data.split("_")[2]
    country_code = callback.data.split("_")[3]
    
    user_data = await state.get_data()
    key = user_data.get("country_key")
    current_country = user_data.get("current_country")
    device = user_data.get("device")
    
    if not key:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback.message.edit_caption(
            caption="‚è≥ <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...</b>\n\n"
            "–°–æ–∑–¥–∞–µ–º –¥–ª—è –≤–∞—Å –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
        )
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–ª—é—á–∞
        protocol = 'ss' if key.startswith('ss://') else 'vless'
        device, unique_id, unique_uuid, address, parts = extract_key_data(key)
        old_expiry_time = await get_key_expiry_date(key)
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ
        api, server_address, pbk, sid, sni, port, utls, protocol, country, inbound_id = await get_api_instance(
            country=country_code,
            use_shadowsocks=(protocol == 'ss')
        )
        
        await send_info_for_admins(
            f"[–ö–æ–Ω—Ç—Ä–æ–ª—å –°–µ—Ä–≤–µ—Ä–∞, –§—É–Ω–∫—Ü–∏—è: process_country_change]\n–ù–∞–π–¥–µ–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:\n{server_address},\n{pbk},\n{sid}\n{sni}... ",
            await get_admins(),
            bot,
            username=callback.from_user.username
        )
        
        await api.login()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ email –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        random_part = ''.join(random.choice(string.ascii_lowercase) for _ in range(4))
        unique_email = f"{parts[0]}_{random_part}_{parts[2]}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
        if protocol == 'vless':
            new_client = Client(
                id=unique_uuid,
                email=unique_email,
                enable=True,
                expiry_time=old_expiry_time,
                flow="xtls-rprx-vision"
            )
        else:
            method = "chacha20-ietf-poly1305"
            password = generate_random_string(32)
            new_client = Client(
                id=generate_random_string(8),
                email=unique_email,
                password=password,
                method=method,
                enable=True,
                expiry_time=old_expiry_time
            )
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        await api.client.add(inbound_id, [new_client])
        server_address_base = server_address.split(":")[0]
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
        if protocol == 'vless':
            new_key = (
                f"vless://{unique_uuid}@{server_address_base}:{port}"
                "?type=tcp&security=reality"
                f"&pbk={pbk}"
                f"&fp={utls}&sni={sni}&sid={sid}&spx=%2F"
                f"&flow=xtls-rprx-vision#Atlanta%20VPN-{new_client.email}"
            )
        else:
            ss_config = f"{method}:{password}"
            encoded_config = base64.urlsafe_b64encode(ss_config.encode()).decode().rstrip('=')
            new_key = f"ss://{encoded_config}@{server_address_base}:{port}?type=tcp#Atlanta%20VPN-{new_client.email}"
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        new_client_check = await api.client.get_by_email(new_client.email)
        if not new_client_check:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        
        # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await add_active_key(callback.from_user.id, new_key, device, old_expiry_time, device)
        
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        clients_count = await get_server_count_by_address(
            server_address_base, inbound_id, 
            protocol="shadowsocks" if protocol == 'ss' else "vless"
        )
        await update_server_clients_count(server_address_base, clients_count + 1, inbound_id)
        
        # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤–æ–º –∫–ª—é—á–µ
        kb = InlineKeyboardBuilder()
        kb.button(text="üìñ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data=f"guide_{device}")
        kb.button(text="üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="active_keys")
        kb.button(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–∞", callback_data="key_settings")
        kb.adjust(1)
        
        await callback.message.edit_caption(
            caption="‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Å—Ç—Ä–∞–Ω—É!</b>\n\n"
            f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}\n"
            f"üåç –ù–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∞: <b>{country}</b>\n"
            f"üîë –ù–æ–≤—ã–π –∫–ª—é—á:\n<code>{new_key}</code>\n\n"
            "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n"
            "–°—Ç–∞—Ä—ã–π –∫–ª—é—á —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=kb.as_markup()
        )
        
        logger.info(f"New key successfully created for user {callback.from_user.id}: {new_key}")
        
        # 6. –¢–µ–ø–µ—Ä—å –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–ª—é—á (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            old_server = await get_server_by_address(
                address, 
                protocol="shadowsocks" if protocol == 'ss' else "vless"
            )
            
            if old_server:
                old_api = AsyncApi(
                    f"http://{old_server['address']}",
                    old_server['username'],
                    old_server['password'],
                    use_tls_verify=False
                )
                await old_api.login()
                
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                if protocol == 'ss':
                    await old_api.client.delete(
                        inbound_id=old_server['inbound_id'], 
                        client_uuid=f"{parts[0]}_{parts[1]}_{parts[2]}"
                    )
                else:
                    await old_api.client.delete(
                        inbound_id=old_server['inbound_id'], 
                        client_uuid=str(unique_uuid)
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–µ
                old_clients_count = await get_server_count_by_address(
                    address, 
                    old_server['inbound_id'], 
                    protocol="shadowsocks" if protocol == 'ss' else "vless"
                )
                await update_server_clients_count(
                    address, 
                    old_clients_count - 1, 
                    old_server['inbound_id']
                )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await remove_key_bd(key)
            logger.info(f"Old key successfully removed for user {callback.from_user.id}")
            
        except Exception as delete_error:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ—ë,
            # –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –Ω–µ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.error(f"Error deleting old key: {delete_error}. Key might remain active.")
            await send_info_for_admins(
                f"[–ó–∞–º–µ–Ω–∞ —Å—Ç—Ä–∞–Ω—ã] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {delete_error}",
                await get_admins(),
                bot,
                username=callback.from_user.username
            )
            
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
        logger.error(f"Error creating new key: {str(e)}", exc_info=True)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="change_key_country")
        kb.button(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–∞", callback_data="key_settings")
        kb.button(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")
        kb.adjust(1)
        
        await callback.message.edit_caption(
            caption="‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞</b>\n\n"
            f"{str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=kb.as_markup()
        )
    
    finally:
        await state.clear()

@router.callback_query(F.data == "replace_key")
async def replace_key(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–º–µ–Ω—ã
    """
    user_keys = await get_user_keys(callback.from_user.id)
    
    if not user_keys:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        await callback.message.edit_text(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π</b>\n\n"
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        return
    
    kb = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
    for key_data in user_keys:
        key = key_data[0]            # key
        device_id = key_data[1]      # device_id
        expiration_date = key_data[2] # expiration_date
        name = key_data[3]           # name
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        if name:
            display_name = f"¬´{name}¬ª"  # –í—ã–¥–µ–ª—è–µ–º –∏–º—è –∫–ª—é—á–∞ –∫–∞–≤—ã—á–∫–∞–º–∏
        else:
            # –ï—Å–ª–∏ –∏–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ, –∏–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –∫–ª—é—á–∞
            display_name = "–ö–ª—é—á"
            if "#Atlanta%20VPN-" in key:
                display_name = key.split("#Atlanta%20VPN-")[1]
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ –¥–ª—è callback_data
        key_id = hashlib.md5(key.encode()).hexdigest()[:10]
        kb.button(
            text=f"üîë {device_id.upper()} - {display_name}", 
            callback_data=f"replace_key_{key_id}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        await state.update_data({f"key_{key_id}": key})
    
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="active_keys")
    kb.adjust(1)
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/09.jpg"),
            caption="üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –∑–∞–º–µ–Ω—ã</b>\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å:"
        )
    ) 
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())    



@router.callback_query(F.data.startswith("replace_key_"))
async def select_key_for_replacement(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–ª—é—á–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
    """
    key_id = callback.data.split("_")[2]
    user_data = await state.get_data()
    key = user_data.get(f"key_{key_id}")
    
    if not key:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–º–µ–Ω—ã –∫–ª—é—á–∞
    await process_selected_key(callback.message, key, callback.from_user.id, state, bot)


async def process_selected_key(message, key, user_id, state, bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–º–µ–Ω—ã
    """
    try:
        if not (key.startswith("vless://") or key.startswith("ss://")):
            kb = InlineKeyboardBuilder()
            kb.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="replace_key")
            kb.button(text="‚óÄÔ∏è –ú–æ–∏ –∫–ª—é—á–∏", callback_data="active_keys")
            kb.adjust(1)
            
            await message.edit_text(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á —Å–Ω–æ–≤–∞.",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–ª—é—á–∞
        protocol = 'ss' if key.startswith('ss://') else 'vless'
        device, unique_id, unique_uuid, address, parts = extract_key_data(key)
        old_expiry_time = await get_key_expiry_date(key)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑ 4 –±—É–∫–≤ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ email
        random_part = ''.join(random.choice(string.ascii_lowercase) for _ in range(4))
        unique_email = f"{parts[0]}_{random_part}_{parts[2]}"

        # 1. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        new_api, server_address, pbk, sid, sni, port, utls, protocol, country, inbound_id = await get_api_instance(
            use_shadowsocks=(protocol == 'ss')
        ) 
        await send_info_for_admins(
            f"[–ö–æ–Ω—Ç—Ä–æ–ª—å –°–µ—Ä–≤–µ—Ä–∞, –§—É–Ω–∫—Ü–∏—è: process_selected_key]\n–ù–∞–π–¥–µ–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:\n{server_address},\n{pbk},\n{sid}\n{sni}... ",
            await get_admins(),
            bot,
            username=message.chat.username
        )        
        await new_api.login()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–ª—é—á–∞
        if protocol == 'vless':
            new_client = Client(
                id=unique_uuid, 
                email=unique_email, 
                enable=True, 
                expiry_time=old_expiry_time, 
                flow="xtls-rprx-vision"
            )  
        else:
            method = "chacha20-ietf-poly1305"
            password = generate_random_string(32)
            new_client = Client(
                id=generate_random_string(8),  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID –¥–ª—è SS
                email=unique_email,
                password=password,
                method=method,
                enable=True,
                expiry_time=old_expiry_time
            )      
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä
        await new_api.client.add(inbound_id, [new_client])
        server_address = server_address.split(":")[0]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
        if protocol == 'ss':
            ss_config = f"{method}:{password}"
            encoded_config = base64.urlsafe_b64encode(ss_config.encode()).decode().rstrip('=')
            new_key = f"ss://{encoded_config}@{server_address}:{port}?type=tcp#Atlanta%20VPN-{new_client.email}"
        else:
            new_key = (
                f"vless://{unique_uuid}@{server_address}:{port}"
                "?type=tcp&security=reality"
                f"&pbk={pbk}"
                f"&fp={utls}&sni={sni}&sid={sid}&spx=%2F"
                f"&flow=xtls-rprx-vision#Atlanta%20VPN-{new_client.email}"
            )
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
        new_client_check = await new_api.client.get_by_email(new_client.email)
        if not new_client_check:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
            
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –ë–î
        await add_active_key(user_id, new_key, device, old_expiry_time, device)
        
        # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ
        clients_count = await get_server_count_by_address(
            server_address, inbound_id, 
            protocol="shadowsocks" if protocol == 'ss' else "vless"
        ) 
        await update_server_clients_count(server_address, clients_count + 1, inbound_id)
        
        # 4. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–º–µ–Ω–µ
        kb = InlineKeyboardBuilder()
        kb.button(text="üìñ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data=f"guide_{device}")
        kb.button(text="üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="active_keys")
        kb.adjust(1)
        await message.edit_media(
            media=InputMediaPhoto(
                media=FSInputFile("handlers/images/10.jpg"),
                caption="‚úÖ <b>–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –∑–∞–º–µ–Ω—ë–Ω!</b>\n\n"
                        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}\n"
                        f"üîë –ù–æ–≤—ã–π –∫–ª—é—á:\n<code>{new_key}</code>\n\n"
                        "‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n"
                        "–°—Ç–∞—Ä—ã–π –∫–ª—é—á –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω."
            )
        ) 
        await message.edit_reply_markup(reply_markup=kb.as_markup())

        # 5. –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            old_server = await get_server_by_address(address, protocol="shadowsocks" if protocol == 'ss' else "vless")
            if old_server:
                old_api = AsyncApi(
                    f"http://{old_server['address']}",
                    old_server['username'],
                    old_server['password'],
                    use_tls_verify=False
                )
                await old_api.login()
                
                # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                if protocol == 'ss':
                    await old_api.client.delete(inbound_id=old_server['inbound_id'], client_uuid=f"{parts[0]}_{parts[1]}_{parts[2]}")
                else:
                    await old_api.client.delete(inbound_id=old_server['inbound_id'], client_uuid=str(unique_uuid))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å–µ—Ä–≤–µ—Ä–µ
                old_clients_count = await get_server_count_by_address(
                    address, old_server['inbound_id'], 
                    protocol="shadowsocks" if protocol == 'ss' else "vless"
                ) 
                await update_server_clients_count(address, old_clients_count - 1, old_server['inbound_id'])
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ –ë–î –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            await remove_key_bd(key)
            logger.info(f"–°—Ç–∞—Ä—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        except Exception as delete_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞: {delete_error}. –ö–ª—é—á –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            await send_info_for_admins(
                f"[–ó–∞–º–µ–Ω–∞ –∫–ª—é—á–∞] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {delete_error}",
                await get_admins(),
                bot,
                username=message.chat.username
            )

        await state.clear()
        await send_info_for_admins(
            f"[–ö–æ–Ω—Ç—Ä–æ–ª—å –ü–†–û–¢–û–ö–û–õ–ê, –§—É–Ω–∫—Ü–∏—è: process_selected_key]\n—Å–µ—Ä–≤–µ—Ä: {server_address},\n—é–∑–µ—Ä: {new_client.email},\n–Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: {protocol}",
            await get_admins(),
            bot,
            username=message.chat.username
        )
        
    except Exception as e:
        logger.error(f"Error replacing key: {str(e)}", exc_info=True)
        await send_info_for_admins(
            f"[–ó–∞–º–µ–Ω–∞ –∫–ª—é—á–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", 
            await get_admins(), 
            bot,
            username=message.chat.username
        )
        
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="replace_key")
        kb.button(text="‚óÄÔ∏è –ú–æ–∏ –∫–ª—é—á–∏", callback_data="active_keys")
        kb.adjust(1)
        
        await message.edit_text(
            "‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –∫–ª—é—á–∞</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
    

@router.callback_query(F.data.startswith("show_keys_"))
async def show_device_keys(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫
    """
    original_device = callback.data.split("_")[2].lower()
    
    # –£–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω (–æ—Ç –¥–ª–∏–Ω–Ω—ã—Ö –∫ –∫–æ—Ä–æ—Ç–∫–∏–º)
    device_mapping = [
        ("androidtv", "androidtv"),
        ("andtv", "androidtv"),
        ("android", "android"),
        ("and", "android"),
        ("windows", "windows"),
        ("win", "windows"),
        ("ios", "ios"),
        ("mac", "mac")
    ]
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device = next(
        (v for k, v in device_mapping if original_device.startswith(k)),
        original_device
    )
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    device_aliases = {k for k, v in device_mapping if v == device}
    device_aliases.add(device)  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    
    user_keys = await get_user_keys(callback.from_user.id)
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∞–ª–∏–∞—Å–æ–≤
    device_keys = [
        key for key in user_keys 
        if key[1].lower() in device_aliases
    ]
    
    if not device_keys:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="active_keys")
        await callback.message.edit_text(
            text="‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è —ç—Ç–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞</b>\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=kb.as_markup()
        )
        return
    
    devices = {
        "ios": "üì± iOS",
        "android": "ü§ñ Android",
        "androidtv": "üì∫ Android TV",
        "windows": "üñ• Windows",
        "mac": "üçé macOS"
    }
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    display_name = devices.get(device, f"‚ùå {device.capitalize()}")
    
    kb = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
    for idx, key_data in enumerate(device_keys, 1):
        key = key_data[0]
        expiry_date = datetime.fromtimestamp(int(key_data[2])/1000).strftime('%d.%m.%Y')
        name = key_data[3]  # –ò–º—è –∫–ª—é—á–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
        if name:
            display_name = f"¬´{name}¬ª"  # –í—ã–¥–µ–ª—è–µ–º –∏–º—è –∫–ª—é—á–∞ –∫–∞–≤—ã—á–∫–∞–º–∏
        else:
            # –ï—Å–ª–∏ –∏–º—è –Ω–µ –∑–∞–¥–∞–Ω–æ, –∏–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –∫–ª—é—á–∞
            display_name = "–ö–ª—é—á"
            if "#Atlanta%20VPN-" in key:
                display_name = key.split("#Atlanta%20VPN-")[1]
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª—é—á–∞ –¥–ª—è callback_data
        key_id = hashlib.md5(key.encode()).hexdigest()[:10]
        kb.button(
            text=f"üîë {display_name} (–¥–æ {expiry_date})", 
            callback_data=f"view_key_{key_id}"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        await state.update_data({f"view_key_{key_id}": key_data})
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    kb.button(text="üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–ª—é—á", callback_data="key_settings")
    kb.button(text="üìñ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data=f"guide_{device}")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="active_keys")
    kb.adjust(1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ
    
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/10.jpg"),
            caption=f"üîë <b>–ö–ª—é—á–∏ –¥–ª—è {display_name}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
            reply_markup=kb.as_markup()
        )
    )
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    await callback.answer()


@router.callback_query(F.data.startswith("view_key_"))
async def show_key_details(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–ª—é—á–µ
    """
    key_id = callback.data.split("_")[2]
    user_data = await state.get_data()
    key_data = user_data.get(f"view_key_{key_id}")
    
    if not key_data:
        await callback.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    
    key = key_data[0]
    device = key_data[1]
    expiry_timestamp = key_data[2]
    
    if device == "and":
        device = "android"
    elif device == "andtv":
        device = "androidtv"
    elif device == "win":
        device = "windows"
    elif device == "mac":
        device = "mac"
        
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–ª—é—á–µ
    expiry_date = datetime.fromtimestamp(int(expiry_timestamp)/1000).strftime('%d.%m.%Y %H:%M')
    _, _, _, address, _ = extract_key_data(key)
    server = await get_server_by_address(address)
    country = server.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') if server else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    masked_key = key
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –∫–ª—é—á–∞
    email = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if "#Atlanta%20VPN-" in key:
        email = key.split("#Atlanta%20VPN-")[1]
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üìñ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data=f"guide_{device}")
    kb.button(text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã", callback_data="change_payment_method")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data=f"show_keys_{device}")
    kb.adjust(1)
    
    protocol = "vless" if "vless://" in key else "Shadowsocks"
    payment_method_id = await get_payment_id_for_key(masked_key)
    payment_method = await get_payment_method_by_id(payment_method_id)
    payment_method_title = payment_method.get("title") if payment_method else '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'
    key_details = (
        f"üîë <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ</b>\n\n"
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}\n"
        f"üìù –ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol}\n"
        f"üìß ID: {email}\n"
        f"üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expiry_date}\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {country}\n"
        f"üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {payment_method_title}\n"
        f"üÜî –ö–ª—é—á(–ö–ª–∏–∫–Ω–∏ –Ω–∞ –Ω–µ–≥–æ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å):\n\n<code>{masked_key}</code>\n\n"
        f"üìú <a href='{CHANNEL_LINK}/31'>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é</a>"
    )
    
    await callback.message.edit_caption(
        caption=key_details,
        reply_markup=kb.as_markup()
    )
    await state.update_data(payment_method_id=payment_method_id, key=key, key_id=key_id)
    await callback.answer()

@router.callback_query(F.data == "change_payment_method")
async def change_payment_method(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
    """
    user_data = await state.get_data()
    payment_method_id = user_data.get("payment_method_id")
    key = user_data.get("key")
    key_id = user_data.get("key_id")
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    payment_methods = await get_user_payment_methods(callback.from_user.id)
    
    kb = InlineKeyboardBuilder()
    
    if payment_methods:
        for method in payment_methods:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
            created_date = datetime.fromisoformat(method['created_at']).strftime("%d.%m.%Y")
            
            # –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
            prefix = "‚úÖ " if method['id'] == payment_method_id else ""
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
            kb.button(
                text=f"{prefix}üí≥ {method['issuer_name']} –æ—Ç {created_date}",
                callback_data=f"set_payment_method_{method['id']}"
            )
    else:
        kb.button(text="üí≥ –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã", callback_data="add_balance")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    kb.button(text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="disable_subscription")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_key_{key_id}")
    kb.adjust(1)
    
    await callback.message.edit_caption(
        caption="üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã</b>\n\n"
               "–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª—é—á–∞.",
        reply_markup=kb.as_markup()
    )
    await callback.answer()

@router.callback_query(F.data == "disable_subscription")
async def disable_subscription(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    """
    user_data = await state.get_data()
    key = user_data.get("key")
    key_id = user_data.get("key_id")
    await set_payment_id_for_key(key, None)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_key_{key_id}")
    await callback.message.edit_caption(caption="‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ", reply_markup=kb.as_markup())
    await callback.answer()

@router.callback_query(F.data.startswith("set_payment_method_"))
async def set_payment_method(callback: types.CallbackQuery, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–ª—é—á–∞
    """
    user_data = await state.get_data()
    key = user_data.get("key")
    key_id = user_data.get("key_id")
    # –ü–æ–ª—É—á–∞–µ–º ID –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã –∏–∑ callback_data
    payment_id = int(callback.data.split("_")[3])
    
    # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –∫ –∫–ª—é—á—É
    await set_payment_id_for_key(key, payment_id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.update_data(payment_method_id=payment_id)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_key_{key_id}")
    await callback.message.edit_caption(caption="‚úÖ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω", reply_markup=kb.as_markup())
    


@router.callback_query(F.data == "add_balance")
async def request_amount(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_email = await get_user_email(callback.from_user.id)
    
    if not user_email:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚úèÔ∏è –î–æ–±–∞–≤–∏—Ç—å email", callback_data="change_email")
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")
        kb.adjust(1)
        
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=FSInputFile("handlers/images/13.jpg"),
                caption="‚ùó <b>–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è email</b>\n\n"
                    "–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω email –∞–¥—Ä–µ—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ email, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å."
            )
        )
        await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
        await callback.answer()
        return
        
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å, –µ—Å–ª–∏ email –µ—Å—Ç—å
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="profile")
    
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/13.jpg"),
            caption="üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n"
                "‚ñ´Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 2‚ÇΩ\n"
                "‚ñ´Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 15000‚ÇΩ\n\n"
                "üìù –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ü–∏—Ñ—Ä–∞–º–∏\n"
                "–ü—Ä–∏–º–µ—Ä: <code>100</code>"
        )
    ) 

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(user_email=user_email)
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
    await state.set_state(BalanceForm.waiting_for_amount)
    await callback.answer()

@router.message(BalanceForm.waiting_for_amount)
async def process_amount(message: Message, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—É–º–º—É
    """
    try:
        amount = int(message.text.strip())
        
        # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_data = await state.get_data()
        email = user_data.get("user_email")
        
        if amount < 2:
            await message.answer(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 2‚ÇΩ\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
                parse_mode="HTML"
            )
            return
        
        if amount > 15000:
            await message.answer(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 15000‚ÇΩ\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑",
                parse_mode="HTML"
            )
            return
        
        try:
            url, label = await create_payment(amount, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞", email)
        except Exception as e:
            await send_info_for_admins(f"[–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", await get_admins(), bot, username=message.from_user.username)
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            return
        
        kb = InlineKeyboardBuilder()
        kb.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)
        kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")
        kb.button(text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π", callback_data="transactions")
        kb.button(text="üí≠ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
        kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="profile")
        kb.adjust(1, 1, 1, 2)
        
        await message.answer_photo(
            photo=types.FSInputFile("handlers/images/13.jpg"),
            caption=(
                f"üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
                f"‚îî –°—É–º–º–∞: {amount:,}‚ÇΩ\n"
                f"‚îî Email: {email}\n"
                f"<i>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª</i>\n\n"
                f"<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã\n\n"
                f"üí° <b>–í–∞–∂–Ω–æ:</b> –ï—Å–ª–∏ –≤—ã —Å–ª—É—á–∞–π–Ω–æ –∑–∞–∫—Ä—ã–ª–∏ —ç—Ç–æ –æ–∫–Ω–æ,\n"
                f"–≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã\n"
                f"–≤ —Ä–∞–∑–¥–µ–ª–µ ¬´üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π¬ª –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.\n\n"
                f"‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
            ),
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )

        await state.update_data(
            request_link=url,
            request_label=label,
            amount=amount,
            email=email,
            action="add_balance"
        )
        await add_transaction(user_id=message.from_user.id, amount=amount, transaction_id=label, status="pending")
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
        scheduler = AsyncIOScheduler()
        scheduler.add_job(
            delayed_payment_check, 
            'date', 
            run_date=datetime.now() + timedelta(minutes=3),
            args=[bot, message.from_user.id, label, amount, "add_balance"]
        )
        scheduler.start()
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã.\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>100</code>",
            parse_mode="HTML"
        )

@router.callback_query(F.data == "extend_subscription")
async def extend_subscription(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    """
    try:
        channel_id = CHANNEL
        member = await bot.get_chat_member(chat_id=channel_id, user_id=callback.from_user.id)
        is_subscribed = member.status not in ["left", "kicked", "banned"]
        
        if not is_subscribed:
            kb = InlineKeyboardBuilder()
            kb.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
            kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            kb.adjust(1)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            await state.set_state(SubscriptionStates.waiting_for_subscription)
            
            await callback.message.answer(
                "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"‚Ä¢ {channel_id}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.\n\n"
                "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç–æ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º:\n"
                "https://telegra.ph/Polzovatelskoe-soglashenie-11-15-12\n\n",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            return

    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    data = await state.get_data()
    if data.get("key_to_connect"):
        user_id = data.get("user_id") 
        expiration_date = data.get("expiration_date")
        device, unique_id, uniquie_uuid, address, parts = extract_key_data(data.get("key_to_connect"))
        
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text="üí≥ 30 –¥–Ω–µ–π - 99‚ÇΩ", callback_data=f"sub_{device}_30_99"))
        kb.add(InlineKeyboardButton(text="üí≥ 3 –º–µ—Å—è—Ü–∞ - 249‚ÇΩ", callback_data=f"sub_{device}_90_249"))
        kb.add(InlineKeyboardButton(text="üí≥ 6 –º–µ—Å—è—Ü–µ–≤ - 449‚ÇΩ", callback_data=f"sub_{device}_180_449"))
        kb.add(InlineKeyboardButton(text="üí≥ 12 –º–µ—Å—è—Ü–µ–≤ - 849‚ÇΩ", callback_data=f"sub_{device}_360_849"))
        kb.adjust(1, 1, 1, 1, 1)
        connection_text = (
            f"‚ö†Ô∏è <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è!</b>\n\n"
            f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {expiration_date}\n"
            f"üîë –ö–ª—é—á: <code>{data.get('key_to_connect')}</code>\n\n"
            f"üåê IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: <code>{address}</code>\n\n"
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, <b>–ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:</b>"
        )
        await callback.message.answer_photo(
            photo=types.FSInputFile("handlers/images/08.jpg"),
            caption=connection_text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        await state.update_data(
            device=device, 
            unique_id=unique_id, 
            uniquie_uuid=uniquie_uuid, 
            user_id=user_id, 
            expiration_date=expiration_date, 
            address=address, 
            key_to_connect=data.get("key_to_connect"), 
            user_name=parts[2]
        )
    else:
        kb = InlineKeyboardBuilder()
        kb.button(text="üîë –ú–æ–∏ –∫–ª—é—á–∏", callback_data="active_keys")
        kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
        kb.adjust(1)
        
        await callback.message.edit_media(
            media=InputMediaPhoto(
                media=FSInputFile("handlers/images/13banner.png"),
                caption="üîë <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å:</b>\n\n"
                        "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ '–ú–æ–∏ –∫–ª—é—á–∏', —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–ª—é—á.\n\n"
                        "–ö–ª—é—á <b>–¥–æ–ª–∂–µ–Ω</b> –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>vless://</code> –∏–ª–∏ <code>ss://</code>\n\n"
                        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</i>",
            )
        )
        await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
        await state.set_state(SubscriptionStates.waiting_for_key)


@router.message(SubscriptionStates.waiting_for_key)
async def process_key_for_extension(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    """
    key = message.text.strip()
    
    if not (key.startswith("vless://") or key.startswith("ss://")):
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", 
            callback_data="back_to_menu"
        ))
        
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞</b>\n\n"
            "–ö–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>vless://</code>\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        return

    device, unique_id, uniquie_uuid, address, parts = extract_key_data(key)
    if not all([device, unique_id, uniquie_uuid, address]):
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(
            text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", 
            callback_data="back_to_menu"
        ))
        
        await message.answer(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–ª—é—á</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á\n"
            "–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        return

    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="üí≥ 30 –¥–Ω–µ–π - 99‚ÇΩ", callback_data=f"sub_{device}_30_99"))
    kb.add(InlineKeyboardButton(text="üí≥ 3 –º–µ—Å—è—Ü–∞ - 249‚ÇΩ", callback_data=f"sub_{device}_90_249"))
    kb.add(InlineKeyboardButton(text="üí≥ 6 –º–µ—Å—è—Ü–µ–≤ - 449‚ÇΩ", callback_data=f"sub_{device}_180_449"))
    kb.add(InlineKeyboardButton(text="üí≥ 12 –º–µ—Å—è—Ü–µ–≤ - 849‚ÇΩ", callback_data=f"sub_{device}_360_849"))
    kb.adjust(1, 1, 1, 1, 1)
    connection_text = (
        "üîÑ <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        f"üîë –ö–ª—é—á: <code>{key}</code>\n"
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}\n"
        f"üåê IP –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞: <code>{address}</code>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è:"
    )
    
    await message.answer_photo(
        photo=types.FSInputFile("handlers/images/08.jpg"),
        caption=connection_text,
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    
    await state.update_data(
        device=device, 
        unique_id=unique_id, 
        uniquie_uuid=uniquie_uuid,
        address=address, 
        key_to_connect=key,
        user_name=parts[2]
    )


@router.callback_query(F.data == "connection")
async def connection(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN
    
    args:
        callback: Callback query –æ—Ç –∫–Ω–æ–ø–∫–∏
        state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM 
    """
    try:
        channel_id = CHANNEL
        member = await bot.get_chat_member(chat_id=channel_id, user_id=callback.from_user.id)
        is_subscribed = member.status not in ["left", "kicked", "banned"]
        
        if not is_subscribed:
            kb = InlineKeyboardBuilder()
            kb.button(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=CHANNEL_LINK)
            kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subscription")
            kb.adjust(1)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            await state.set_state(SubscriptionStates.waiting_for_subscription)
            
            await callback.message.answer(
                "üîí <b>–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                f"‚Ä¢ {channel_id}\n\n"
                "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª.\n\n"
                "–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª, –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Ç–æ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å  –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º:\n"
                "https://telegra.ph/Polzovatelskoe-soglashenie-11-15-12\n\n",
                reply_markup=kb.as_markup(),
                parse_mode="HTML"
            )
            return

    except Exception as e:
        logger.error(f"Error checking subscription: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
        
    kb = InlineKeyboardBuilder()
    kb.button(text="üì± iOS", callback_data="device_ios")
    kb.button(text="ü§ñ Android", callback_data="device_android")
    kb.button(text="üì∫ Android TV", callback_data="device_androidtv")
    kb.button(text="üñ• Windows", callback_data="device_windows")
    kb.button(text="üçé macOS", callback_data="device_mac")
    kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    kb.adjust(2, 2, 1, 1) 

    connection_text = (
        "üåê <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:</b>\n\n"
        "–ú—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
    )

    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/08.jpg"),
            caption=connection_text,
        )
    ) 
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())    
    await callback.answer()

@router.callback_query(F.data.startswith("device_"))
async def choose_subscription(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    """
    device = callback.data.split("_")[1]
    try:
        user = await get_user(user_id=callback.from_user.id)
        free_keys_count = await get_free_keys_count(callback.from_user.id)
        if free_keys_count > 0:

            if await state.get_state() is not None:
                await callback.answer(
                    "–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ", 
                    show_alert=True
                )
                await update_free_keys_count(callback.from_user.id, 0)
                return
            await update_free_keys_count(callback.from_user.id, 0)

            logger.info(f"Starting free subscription creation for user {callback.from_user.id}")
            api, server_address, pbk, sid, sni, port, utls, protocol, country, inbound_id = await get_api_instance(use_shadowsocks=False) 
            await send_info_for_admins(
                f"[–ö–æ–Ω—Ç—Ä–æ–ª—å –°–µ—Ä–≤–µ—Ä–∞, –§—É–Ω–∫—Ü–∏—è: choose_subscription]\n–ù–∞–π–¥–µ–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:\n{server_address},\n{pbk},\n{sid}\n{sni}... ",
                await get_admins(),
                bot,
                username=callback.from_user.username
            )
            logger.info(f"Got API instance. Address: {server_address}")
            #clients_count = await get_server_count_by_address(address)
            #logger.info(f"Current clients count for address {address}: {clients_count}")
            login_result = await api.login()
            logger.info(f"API login result: {login_result}")
            free_days = await get_free_days(callback.from_user.id)

            current_time = datetime.now(timezone.utc).timestamp() * 1000
            expiry_time = int(current_time + int(free_days) * 86400000)
            logger.info(f"Expiry time set to: {datetime.fromtimestamp(expiry_time/1000)}")
            

            keys_count = await get_keys_count(callback.from_user.id)
            logger.info(f"Current keys count for user: {keys_count}")
            #await send_info_for_admins(f"[–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {keys_count}", await get_admins(), bot)

            client_id = str(uuid.uuid4())
            random_suffix = generate_random_string(4)
            logger.info(f"Generated client_id: {client_id}, suffix: {random_suffix}")
            #await send_info_for_admins(f"[–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞] Generated client_id: {client_id}, suffix: {random_suffix}", await get_admins(), bot)

            device_prefix = {
                "ios": "ios",
                "android": "and",
                "androidtv": "andtv",
                "windows": "win",
                "mac": "mac"
            }
            logger.info(f"Selected device: {device}")
            #await send_info_for_admins(f"[–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞] –í—ã–±—Ä–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}", await get_admins(), bot)

            if not user or 'username' not in user:
                await send_info_for_admins(f"[–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞] User data error. User object: {user}", await get_admins(), bot, username=callback.from_user.username)
                logger.error(f"User data error. User object: {user}")
                raise ValueError("User data is incomplete")

            email = f"{device_prefix.get(device, 'dev')}_{random_suffix}_{user['username'] or str(random.randint(100000, 999999))}"
            logger.info(f"Generated email: {email}")
            #await send_info_for_admins(f"[–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞] Generated email: {email}", await get_admins(), bot)
            
            new_client = Client(id=client_id, email=email, enable=True, expiry_time=expiry_time, flow="xtls-rprx-vision")
            logger.info(f"Created new client object: {new_client.__dict__}")
            
            add_result = await api.client.add(inbound_id, [new_client])
            logger.info(f"Add client result: {add_result}")
            #await send_info_for_admins(f"[–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞] –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–∞–Ω–µ–ª—å, —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {add_result}", await get_admins(), bot)
            await api.login()
            
            client = await api.client.get_by_email(email)
            logger.info(f"Retrieved client by email: {client}")
            server_address = server_address.split(':', 1)[0]
            print("server addr " + server_address)
            if client:   
                vpn_link = (
                    f"vless://{client_id}@{server_address}:{port}"
                    "?type=tcp&security=reality"
                    f"&pbk={pbk}"
                    f"&fp={utls}&sni={sni}&sid={sid}&spx=%2F"
                    f"&flow=xtls-rprx-vision#Atlanta%20VPN-{client.email}"
                )
                logger.info("Generated VPN link for client")
                kb = InlineKeyboardBuilder()
                kb.button(text="üìñ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data=f"guide_{device}")
                kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                kb.adjust(1)
                success_text = (
                    f"‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                    f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}\n"
                    f"‚è± –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {free_days} –¥–Ω–µ–π\n\n"
                    f"üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
                    f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: <code>{client.id}</code>\n"
                    f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n<code>{vpn_link}</code>"
                )
                
                await callback.message.answer(success_text, parse_mode="HTML", reply_markup=kb.as_markup())
                await add_active_key(callback.from_user.id, vpn_link, device, client.expiry_time, device)
                await update_keys_count(callback.from_user.id, keys_count + 1)
                clients_count = await get_server_count_by_address(server_address, inbound_id, protocol="shadowsocks" if protocol == 'ss' else "vless") 
                await update_server_clients_count(server_address, clients_count + 1, inbound_id) 
                expiry_time = datetime.fromtimestamp(expiry_time/1000).strftime('%d.%m.%Y %H:%M')
                await update_subscription(callback.from_user.id, "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è", expiry_time)
                logger.info(f"Successfully completed subscription creation for user {callback.from_user.id}")
                await send_info_for_admins(f"[–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞] –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['username']}, user id: {callback.from_user.id}, device: {device}, days: {free_days}", await get_admins(), bot, username=user.get("username"))
                #await send_info_for_admins(f"[–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user}", await get_admins(), bot)
                await state.clear()
                await send_info_for_admins(
                    f"[–ö–æ–Ω—Ç—Ä–æ–ª—å –ü–†–û–¢–û–ö–û–õ–ê, –§—É–Ω–∫—Ü–∏—è: choose_subscription.\n—Å–µ—Ä–≤–µ—Ä: {server_address},\n—é–∑–µ—Ä: {client.email},\n–Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: {protocol}]:\n{new_client}",
                    await get_admins(),
                    bot,
                    username=user.get("username")
                )
            else:
                await send_info_for_admins(f"[–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞] –ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è. Email: {email}", await get_admins(), bot, username=user.get("username"))
                logger.error(f"Client not found after creation. Email: {email}")
                await state.clear()
                raise ValueError("Client not found after creation")
        else:
            await state.update_data(device=device)

            kb = InlineKeyboardBuilder()
            kb.button(text="üöÄ –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data=f"continue_sub_{device}")
            kb.button(text="‚öôÔ∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", callback_data=f"select_sub_protocol_{device}")
            kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="connection")
            kb.adjust(1)

            device_names = {
                "ios": "üì± iOS",
                "androidtv": "üì∫ Android TV",
                "android": "ü§ñ Android",
                "windows": "üñ• Windows",
                "mac": "üçé macOS"
            }

            subscription_text = (
                f"üî• <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device_names.get(device, device.upper())}\n\n"
                f"<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n"
                f"üöÄ <b>–ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</b>\n"
                f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞\n"
                f"‚Ä¢ –ü—Ä–æ—Ç–æ–∫–æ–ª VLESS –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏\n"
                f"‚Ä¢ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
                f"‚öôÔ∏è <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞</b>\n"
                f"‚Ä¢ –í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
                f"‚Ä¢ –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
            )

            await callback.message.edit_media(
                media=InputMediaPhoto(
                    media=FSInputFile("handlers/images/03.jpg"),
                    caption=subscription_text,
                )
            ) 

            await callback.message.edit_reply_markup(reply_markup=kb.as_markup())
            await callback.answer()

    except Exception as e:
        logger.error(f"Error creating free subscription: {str(e)}", exc_info=True)
        error_message = (
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏:\n"
            f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {str(e)}\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        await callback.message.answer(error_message)

@router.callback_query(F.data.startswith("continue_sub_"))
async def continue_subscription(callback: types.CallbackQuery, state: FSMContext):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç VLESS –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞—Ä–∏—Ñ—ã
    """
    device = callback.data.split("_")[2]
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º VLESS –ø—Ä–æ—Ç–æ–∫–æ–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    await state.update_data(
        selected_protocol='vless'
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="üí≥ 30 –¥–Ω–µ–π - 99‚ÇΩ", callback_data=f"sub_{device}_30_99"))
    kb.add(InlineKeyboardButton(text="üí≥ 3 –º–µ—Å—è—Ü–∞ - 249‚ÇΩ", callback_data=f"sub_{device}_90_249"))
    kb.add(InlineKeyboardButton(text="üí≥ 6 –º–µ—Å—è—Ü–µ–≤ - 449‚ÇΩ", callback_data=f"sub_{device}_180_449"))
    kb.add(InlineKeyboardButton(text="üí≥ 12 –º–µ—Å—è—Ü–µ–≤ - 849‚ÇΩ", callback_data=f"sub_{device}_360_849"))
    kb.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"device_{device}"))
    kb.adjust(1)

    subscription_text = (
        f"üî• <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}\n"
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"‚Ä¢ üì° –ü—Ä–æ—Ç–æ–∫–æ–ª: VLESS\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ:\n"
        f"‚Ä¢ –ß–µ–º –¥–æ–ª—å—à–µ –ø–µ—Ä–∏–æ–¥, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞\n"
        f"‚Ä¢ –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã –≤–∫–ª—é—á–∞—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n"
        f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"
    )

    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/03.jpg"),
            caption=subscription_text,
        )
    ) 
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())


@router.callback_query(F.data.startswith("select_sub_protocol_"))
async def select_subscription_protocol(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    """
    device = callback.data.split("_")[3]
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üì° VLESS", callback_data=f"set_sub_protocol_{device}_vless")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"device_{device}")
    kb.adjust(1)
    
    protocol_message = (
        "üîí <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n"
        "<b>üì° VLESS</b> (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)\n"
        "‚Ä¢ –ù–æ–≤–µ–π—à–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é\n"
        "‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ REALITY –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫\n"
        "‚Ä¢ <b>–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø</b> –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        "<b>üõ° Shadowsocks</b>\n"
        "üí° <i>–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤–≤–∏–¥—É –º–∞—Å—Å–æ–≤–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏</i>\n"
    )
    
    await callback.message.edit_media(
        media=InputMediaPhoto(
            media=FSInputFile("handlers/images/03.jpg"),
            caption=protocol_message,
        )
    ) 
    await callback.message.edit_reply_markup(reply_markup=kb.as_markup())

@router.callback_query(F.data.startswith("set_sub_country_"))
async def set_subscription_country(callback: types.CallbackQuery, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω—É –∏ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∞—Ä–∏—Ñ—ã
    """
    _, _, _, device, country = callback.data.split("_")
    await state.update_data(selected_country=country)
    
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="üí≥ 30 –¥–Ω–µ–π - 99‚ÇΩ", callback_data=f"sub_{device}_30_99"))
    kb.add(InlineKeyboardButton(text="üí≥ 3 –º–µ—Å—è—Ü–∞ - 249‚ÇΩ", callback_data=f"sub_{device}_90_249"))
    kb.add(InlineKeyboardButton(text="üí≥ 6 –º–µ—Å—è—Ü–µ–≤ - 449‚ÇΩ", callback_data=f"sub_{device}_180_449"))
    kb.add(InlineKeyboardButton(text="üí≥ 12 –º–µ—Å—è—Ü–µ–≤ - 849‚ÇΩ", callback_data=f"sub_{device}_360_849"))
    kb.add(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data=f"device_{device}"))
    kb.adjust(1)

    data = await state.get_data()
    selected_protocol = data.get('selected_protocol')
    
    settings_info = [f"üåç –°—Ç—Ä–∞–Ω–∞: {country}"]
    if selected_protocol:
        settings_info.append(f"üì° –ü—Ä–æ—Ç–æ–∫–æ–ª: {selected_protocol.upper()}")
    
    settings_text = "\n".join(settings_info)

    subscription_text = (
        f"üî• <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}\n"
        f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n{settings_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—Å —Ç–∞—Ä–∏—Ñ:\n"
        f"‚Ä¢ –ß–µ–º –¥–æ–ª—å—à–µ –ø–µ—Ä–∏–æ–¥, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ —Ü–µ–Ω–∞\n"
        f"‚Ä¢ –í—Å–µ —Ç–∞—Ä–∏—Ñ—ã –≤–∫–ª—é—á–∞—é—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n"
        f"‚Ä¢ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"
    )

    await callback.message.edit_caption(
        caption=subscription_text,
        reply_markup=kb.as_markup(),
    )

@router.callback_query(F.data.startswith("set_sub_protocol_"))
async def set_subscription_protocol(callback: types.CallbackQuery, state: FSMContext):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
    """
    _, _, _, device, protocol = callback.data.split("_")
    await state.update_data(selected_protocol=protocol)
    
    # Get countries that support the selected protocol
    countries = await get_available_countries(protocol=protocol)
    
    kb = InlineKeyboardBuilder()
    for country in countries:
        kb.button(text=f"üåç {country['name']}", callback_data=f"set_sub_country_{device}_{country['code']}")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"device_{device}")
    kb.adjust(1)
    
    await callback.message.edit_caption(
        caption=f"‚úÖ –í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª: {protocol.upper()}\n\n"
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=kb.as_markup()
    )


@router.callback_query(F.data.startswith("sub_"))
async def process_subscription(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç email –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    """
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –∏ —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await callback_query.answer("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    await callback_query.message.edit_caption(
        caption="‚è≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...</b>\n\n"
               "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
        parse_mode="HTML"
    )
    
    subscription_data = callback_query.data.split("_")
    await state.update_data(
        device=subscription_data[1],
        days=subscription_data[2],
        price=subscription_data[3]
    )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ email
    user_email = await get_user_email(callback_query.from_user.id)
    
    if user_email:
        # –ï—Å–ª–∏ email —É–∂–µ –µ—Å—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ email
        await process_email(callback_query.message, state, bot, user_email, callback_query.from_user.id)
        return

    # –ï—Å–ª–∏ email –Ω–µ—Ç, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="connection")
    kb.adjust(1)

    await callback_query.message.edit_caption(
        caption="üìß –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:\n\n"
        "‚ùóÔ∏è Email –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è:\n"
        "‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞\n"
        "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n"
        "‚Ä¢ –í–∞–∂–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n"
        "‚Ä¢ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ–∫–∞ –æ –ø–æ–∫—É–ø–∫–µ\n\n"
        "–ü—Ä–∏–º–µ—Ä: example@mail.com",
    ) 
    await callback_query.message.edit_reply_markup(reply_markup=kb.as_markup())
    await state.set_state(SubscriptionStates.waiting_for_email)

@router.message(SubscriptionStates.waiting_for_email)
async def process_email(message: Message, state: FSMContext, bot: Bot, existing_email: str = None, user_id: int = None):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ email
    –ï—Å–ª–∏ email –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ, –∏–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    """
    current_user_id = user_id if user_id else message.from_user.id
    if existing_email:
        UserEmail = existing_email
    else:
        UserEmail = message.text.lower().strip()
        if not re.match(r"[^@]+@[^@]+\.[^@]+", UserEmail):
            kb = InlineKeyboardBuilder()
            kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="connection")
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.\n"
                "–ü—Ä–∏–º–µ—Ä: example@mail.com",
                reply_markup=kb.as_markup()
            )
            return
        
        await save_or_update_email(message.from_user.id, UserEmail)

    data = await state.get_data()
    device = data.get('device')
    days = data.get('days')
    price = data.get('price')
    selected_country = data.get('selected_country')
    selected_protocol = data.get('selected_protocol')

    user = await get_user(user_id=current_user_id)
    balance = int(user['balance'])

    await send_info_for_admins(f"[–ü–æ–¥–ø–∏—Å–∫–∞] –û–±—Ä–∞–±–æ—Ç–∫–∞ email –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user_id}", await get_admins(), bot, username=user.get("username"))

    user_id = data.get("user_id") 
    unique_id = data.get("unique_id") 
    unique_uuid = data.get("uniquie_uuid")
    address = data.get("address")
    user_name = data.get("user_name")
    key_to_connect = data.get("key_to_connect")

    print(data)
    if unique_id: 
        if balance < int(price):
            kb = InlineKeyboardBuilder()
            answer_message = (
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                "üí∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
            )
            kb.add(InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance"))
            await message.answer(answer_message, reply_markup=kb.as_markup())
            return
        else:
            logger.info(f"Attempting to continue payment for user {current_user_id}")
            await send_info_for_admins(f"[–ü—Ä–æ–¥–ª–µ–Ω–∏–µ] –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user_id}", await get_admins(), bot, username=user.get("username"))
            logger.info(f"Key to connect: {key_to_connect}, unique_uuid: {unique_uuid}")
            try: 
                protocol = 'ss' if key_to_connect.startswith('ss://') else 'vless'

                server = await get_server_by_address(address)
                api = AsyncApi(
                            f"http://{server['address']}",
                            server['username'],
                            server['password'],
                            use_tls_verify=False
                )
                await send_info_for_admins(
                    f"[–ö–æ–Ω—Ç—Ä–æ–ª—å –°–µ—Ä–≤–µ—Ä–∞, –§—É–Ω–∫—Ü–∏—è: process_email]\n–ù–∞–π–¥–µ–Ω—ã–π —Å–µ—Ä–≤–µ—Ä IP:\n{address}",
                    await get_admins(),
                    bot, 
                    username=user.get("username")
                )
                try:
                    await api.login()
                    email = f"{device}_{unique_id}_{user_name}"
                    print(f"Continue email: {email}")
                    client = await api.client.get_by_email(email)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                    original_expiry = await get_key_expiry_date(key_to_connect)
                    if original_expiry:
                        current_expiry = int(original_expiry)
                    else:
                        current_expiry = int(client.expiry_time)
                    
                    milliseconds_to_add = int(days) * 86400000
                    new_expiry_time = current_expiry + milliseconds_to_add
                    
                    print(f"Original expiry date: {datetime.fromtimestamp(current_expiry/1000).strftime('%d.%m.%Y')}")
                    print(f"Adding {days} days")
                    print(f"New expiry date: {datetime.fromtimestamp(new_expiry_time/1000).strftime('%d.%m.%Y')}")
                    
                    if protocol == 'vless':
                        client.expiry_time = new_expiry_time
                        client.flow="xtls-rprx-vision"
                        client.id = str(str(unique_uuid))
                        client.email = client.email
                        client.enable = client.enable
                        client.inbound_id=client.inbound_id
                        await api.client.update(
                            client_uuid=str(unique_uuid),
                            client=client
                        )
                    else:
                        client.expiry_time = new_expiry_time
                        client.inbound_id=client.inbound_id
                        await api.client.update(
                            client_uuid=str(email),
                            client=client
                        )
                        
                    await send_info_for_admins(f"[–ü–†–û–¢–û–ö–û–õ –ü–†–û–î–õ–ï–ù–ò–Ø]: {protocol}", await get_admins(), bot)
                    await api.login()
                    updated_client = await api.client.get_by_email(f"{device}_{unique_id}_{user_name}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    print(f"Updated client expiry_time: {updated_client.expiry_time}")
                    print(f"Updated date: {datetime.fromtimestamp(updated_client.expiry_time/1000).strftime('%d.%m.%Y')}")

                    success_text = (
                        f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!\n\n"
                        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}\n"
                        f"‚è± –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π\n\n"
                        f"üîÑ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {datetime.fromtimestamp(updated_client.expiry_time/1000).strftime('%d.%m.%Y')}"
                    )

                    kb = InlineKeyboardBuilder()
                    kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                    kb.adjust(1, 1)

                    await message.answer_photo(
                        photo=types.FSInputFile("handlers/images/10.jpg"),
                        caption=success_text,
                        parse_mode="HTML",
                        reply_markup=kb.as_markup()
                    )

                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                    await update_key_expiry_date(
                        key = key_to_connect, 
                        new_expiry_time=new_expiry_time
                    )
                    await update_balance(current_user_id, balance - int(price))
                    await send_info_for_admins(
                        f"[–ö–æ–Ω—Ç—Ä–æ–ª—å –ü–†–û–¢–û–ö–û–õ–ê, –§—É–Ω–∫—Ü–∏—è: process_email.\n—Å–µ—Ä–≤–µ—Ä: {address},\n—é–∑–µ—Ä: {client.email},\n–Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: {protocol}]:\n{client}",
                        await get_admins(),
                        bot, 
                        username=user.get("username")
                    )
                except Exception as e:
                    logger.error(f"Error updating client: {str(e)}", exc_info=True)
                    error_message = (
                        "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n"
                        f"Error: {e}\n\n"
                        f"‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}\n"
                        f"‚Ä¢ –î–Ω–∏: {days}\n"
                        f"‚Ä¢ ID –∫–ª–∏–µ–Ω—Ç–∞: {client.id if client else 'Not found'}\n"
                        f"‚Ä¢ Inbound ID: {client.inbound_id if client else 'Not found'}"
                    )
                    await message.answer(error_message)
                    print(f"Client details: {client}")
                    print(f"Unique UUID: {unique_uuid}")
                    await send_info_for_admins(f"[–ü—Ä–æ–¥–ª–µ–Ω–∏–µ] Unique UUID: {unique_uuid}", await get_admins(), bot, username=user.get("username"))
                return


            except Exception as e:
                logger.error(f"Error creating client: {str(e)}", exc_info=True)
                error_message = f"‚ùå –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}"
                await message.answer(error_message)
            return
    else:
        await send_info_for_admins(f"[–ü—Ä–æ–¥–ª–µ–Ω–∏–µ] –ù–µ –Ω–∞–π–¥–µ–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user_id}", await get_admins(), bot, username=user.get("username"))
        logger.info(f"No unique_id found for user {current_user_id}")

    kb = InlineKeyboardBuilder()

    devices = {
        "ios": "üì± iOS",
        "android": "ü§ñ Android",
        "androidtv": "üì∫ Android TV",
        "windows": "üñ• Windows",
        "mac": "üçé macOS"
    }

    if balance < int(price):
        kb = InlineKeyboardBuilder()
        answer_message = (
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "üí∞ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        kb.add(InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance"))
        await message.answer(answer_message, reply_markup=kb.as_markup())
        return
    else:
        logger.info(f"Attempting to create client for user {current_user_id} for {days} days")
        await send_info_for_admins(f"[–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏] –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_user_id} –Ω–∞ {days} –¥–Ω–µ–π", await get_admins(), bot, username=user.get("username"))
        try:
            api, address, pbk, sid, sni, port, utls, protocol, country, inbound_id = await get_api_instance(
                country=selected_country,
                use_shadowsocks=(selected_protocol == 'ss') if selected_protocol else None
            )
            await send_info_for_admins(
                f"[–ö–æ–Ω—Ç—Ä–æ–ª—å –°–µ—Ä–≤–µ—Ä–∞, –§—É–Ω–∫—Ü–∏—è: process_email]\n–ù–∞–π–¥–µ–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:\n{address},\n{pbk},\n{sid}\n{sni}... ",
                await get_admins(),
                bot,
                username=user.get("username")
            )
            clients_count = await get_server_count_by_address(address, inbound_id, protocol="shadowsocks" if selected_protocol == 'ss' else "vless")
            current_time = datetime.now(timezone.utc).timestamp() * 1000
            expiry_time = int(current_time + (int(days) * 86400000))
            keys_count = await get_keys_count(current_user_id)

            try:
                client_id = str(uuid.uuid4())
                random_suffix = generate_random_string(4)
                device_prefix = {
                    "ios": "ios",
                    "android": "and", 
                    "androidtv": "andtv",
                    "windows": "win",
                    "mac": "mac"
                }
                
                username = user.get('username') or str(random.randint(100000, 999999))
                email = f"{device_prefix.get(device, 'dev')}_{random_suffix}_{username}"

                await api.login()

                if selected_protocol == 'vless':
                    new_client = Client(
                        id=client_id, 
                        email=email, 
                        enable=True, 
                        expiry_time=expiry_time, 
                        flow="xtls-rprx-vision"
                    ) 
                else:
                    method = "chacha20-ietf-poly1305"
                    password = generate_random_string(32)

                    new_client = Client(
                        id=client_id,
                        email=email,
                        password=password,
                        method=method,
                        enable=True,
                        expiry_time=expiry_time
                    )

                await api.client.add(inbound_id, [new_client])

            except Exception as e:
                print(e)

            server_address = address.split(':')[0]
            client = await api.client.get_by_email(email)

            if client:   
                if selected_protocol == 'vless':
                    vpn_link = (
                        f"vless://{client_id}@{server_address}:443"
                        "?type=tcp&security=reality"
                        f"&pbk={pbk}"
                        f"&fp={utls}&sni={sni}&sid={sid}&spx=%2F"
                        f"&flow=xtls-rprx-vision#Atlanta%20VPN-{client.email}"
                    )
                else:
                    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –¥–ª—è Shadowsocks
                    ss_config = f"{method}:{password}"
                    encoded_config = base64.urlsafe_b64encode(ss_config.encode()).decode().rstrip('=')
                    vpn_link = f"ss://{encoded_config}@{server_address}:{port}?type=tcp#Atlanta%20VPN-{client.email}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ç–æ–∫–æ–ª–µ –≤ —Ç–µ–∫—Å—Ç —É—Å–ø–µ—Ö–∞
                protocol_info = "Shadowsocks" if selected_protocol == 'ss' else "VLESS"
                success_text = (
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n\n"
                    f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {devices.get(device, device.upper())}\n"
                    f"‚è± –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {days} –¥–Ω–µ–π\n"
                    f"üì° –ü—Ä–æ—Ç–æ–∫–æ–ª: {protocol_info}\n\n"
                    f"üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n"
                    f"–£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID: <code>{client.id}</code>\n"
                    f"–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n<code>{vpn_link}</code>\n\n\n"
                    "üìú <a href='https://t.me/AtlantaVPN/31'>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é</a>"

                )

                kb = InlineKeyboardBuilder()
                kb.button(text="üìñ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å VPN", callback_data=f"guide_{device}")
                kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                
                await message.answer_photo(
                    photo=FSInputFile("handlers/images/10.jpg"),
                    caption=success_text,
                    reply_markup=kb.as_markup(),
                    parse_mode="HTML"
                )

                await update_balance(current_user_id, int(user['balance']) - int(price))
                await add_active_key(current_user_id, vpn_link, device, client.expiry_time, device)
                await update_keys_count(current_user_id, keys_count + 1)
                await update_server_clients_count(address, clients_count + 1, inbound_id)
                expiry_time = datetime.fromtimestamp(expiry_time/1000).strftime('%d.%m.%Y %H:%M')
                await update_subscription(current_user_id, "–ü–æ–¥–ø–∏—Å–∫–∞ –∫—É–ø–ª–µ–Ω–∞", expiry_time)
                await send_info_for_admins(
                    f"[–ö–æ–Ω—Ç—Ä–æ–ª—å –ü–†–û–¢–û–ö–û–õ–ê, –§—É–Ω–∫—Ü–∏—è: process_email 2.\n—Å–µ—Ä–≤–µ—Ä: {address},\n—é–∑–µ—Ä: {client.email},\n–Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: {protocol}]:\n{client}",
                    await get_admins(),
                    bot,
                    username=user.get("username")
                )

                if selected_protocol == 'vless':    
                    try: 
                        await api.login()
                        client = await api.client.get_by_email(email)
                        updated_client = Client(
                            email=client.email,
                            enable=True,
                            id=client_id,
                            inbound_id=client.inbound_id,
                            expiry_time=int(client.expiry_time + (int(days) * 86400000)),
                            flow="xtls-rprx-vision"
                        )
                        await api.client.update(client_uuid=str(client_id), client=updated_client)
                        await api.login()
                        client = await api.client.get_by_email(email)
                        await send_info_for_admins(f"[–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä–∫–∞ Flow] Flow —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω {current_user_id}", await get_admins(), bot, username=user.get("username"))
                    except Exception as e:
                        await send_info_for_admins(f"[–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏. –ü—Ä–æ–≤–µ—Ä–∫–∞ Flow] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}", await get_admins(), bot, username=user.get("username"))
                
            
        except Exception as e:
            await send_info_for_admins(f"[–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ ] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}", await get_admins(), bot, username=user.get("username"))
            error_message = f"‚ùå 1–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}"
            logger.error(error_message)
            await message.answer(error_message)

async def delayed_payment_check(bot: Bot, user_id: int, payment_id: str, amount: int, action: str):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
    """
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user = await get_user(user_id=user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
    payment_success, saved_payment_method_id, payment = await check_payment_status(payment_id, amount)
    
    # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ä–∞–Ω–µ–µ (—Å—Ç–∞—Ç—É—Å –≤—Å—ë –µ—â—ë "pending")
    transaction = await get_transaction_by_id(payment_id)
    if transaction and transaction['status'] == 'pending':
        
        kb = InlineKeyboardBuilder()
        kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="check_payment")
        kb.button(text="üí≠ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")
        kb.adjust(1)
        
        if payment_success:
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            new_balance = int(user['balance']) + amount
            await update_transaction_status(transaction_id=payment_id, new_status="succeeded")
            await update_balance(user_id, new_balance)
            
            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω
            if saved_payment_method_id:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
                await bot.send_message(
                    user_id,
                    "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                    f"üí≥ <b>–°—É–º–º–∞:</b> {amount}‚ÇΩ\n"
                    "üí≥ <b>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—ë–Ω</b>\n"
                    "üí° –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–≤–æ–∏—Ç—å –µ–º—É –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ú–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã",
                    parse_mode="HTML"
                )
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
                await add_payment_method(user_id, payment.payment_method.id, "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–∞")
            else:
                # –ü—Ä–æ—Å—Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
                await bot.send_message(
                    user_id,
                    "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                    f"üí≥ <b>–°—É–º–º–∞:</b> {amount}‚ÇΩ\n"
                    f"üí∞ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {new_balance}‚ÇΩ",
                    parse_mode="HTML"
                )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            if user['referrer_id']:
                referrer = await get_user(user_id=user['referrer_id'])
                first_deposit = await get_is_first_payment_done(user_id)
                bonus_percentage = 0.5 if first_deposit else 0.3
                await update_balance(referrer['user_id'], int(referrer['balance']) + int(amount) * bonus_percentage)
                
                try:
                    ref_kb = InlineKeyboardBuilder()
                    ref_kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                    await bot.send_message(
                        user['referrer_id'],
                        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                        f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ\n"
                        f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: <b>{int(amount) * bonus_percentage}‚ÇΩ</b> ({bonus_percentage * 100}%)",
                        parse_mode="HTML",
                        reply_markup=ref_kb.as_markup()
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                await set_is_first_payment_done(user_id, True)
        else:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω
            await bot.send_message(
                user_id,
                "‚ÑπÔ∏è <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                "–í–∞—à –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="HTML",
                reply_markup=kb.as_markup()
            )

@router.callback_query(F.data == "check_payment")
async def check_payment(callback_query: types.CallbackQuery, state: FSMContext, bot: Bot):
    data = await state.get_data()
    payment_id = data.get('request_label')
    payment_success, saved_payment_method_id, payment = await check_payment_status(payment_id, data.get('amount'))
    action = data.get('action')
    user = await get_user(user_id=callback_query.from_user.id)

    if action == "add_balance":
        await send_info_for_admins(f"[–ÆKassa. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}", await get_admins(), bot, username=user.get("username"))
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {payment_id}")

        if payment_success:
            amount = int(data.get('amount', 0))
            print(amount)
            new_balance = int(user['balance']) + amount

            try:
                kb = InlineKeyboardBuilder()
                await update_transaction_status(transaction_id=payment_id, new_status="succeeded")
                await update_balance(callback_query.from_user.id, new_balance)
                if saved_payment_method_id:                    
                    await bot.send_message(user['user_id'], "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
                                            f"üí≥<b>–°—É–º–º–∞:</b> {amount}‚ÇΩ\n"
                                            "üí≥<b>–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã",
                                            parse_mode="HTML",
                                            reply_markup=kb.as_markup()
                                            )
                    await state.update_data(saved_id=payment.payment_method.id)
                    await state.set_state(SubscriptionStates.waiting_for_payment_method_name)
                if user['referrer_id']:
                    referrer = await get_user(user_id=user['referrer_id'])
                    first_deposit = await get_is_first_payment_done(user['user_id'])
                    bonus_percentage = 0.5 if first_deposit else 0.3
                    await update_balance(referrer['user_id'], int(referrer['balance']) + int(amount) * bonus_percentage)

                    try:
                        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
                        await bot.send_message(
                            user['referrer_id'],
                            f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                            f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É {amount}‚ÇΩ\n"
                            f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: <b>{int(amount) * bonus_percentage}‚ÇΩ</b> ({bonus_percentage * 100}%)",
                            parse_mode="HTML",
                            reply_markup=kb.as_markup()
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")
                        await send_info_for_admins(f"[–ÆKassa. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}", await get_admins(), bot, username=user.get("username"))

                logger.info(f"–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.id}, —Å—É–º–º–∞: {amount}")
                await send_info_for_admins(f"[–ÆKassa. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞] –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.id}, —Å—É–º–º–∞: {amount}", await get_admins(), bot, username=user.get("username"))

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                await set_is_first_payment_done(user['user_id'], True)

            except Exception as e:
                await send_info_for_admins(f"[–ÆKassa. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}", await get_admins(), bot, username=user.get("username"))
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
                await callback_query.message.answer(
                    text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    parse_mode="HTML"
                )
        else:
            kb = InlineKeyboardBuilder()
            kb.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="check_payment")
            kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="back_to_menu")
            kb.adjust(1)

            await callback_query.message.answer_photo(
                photo=types.FSInputFile("handlers/images/14.jpg"),
                caption="–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É, –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
                parse_mode="HTML",
                reply_markup=kb.as_markup()
            )
            await send_info_for_admins(f"[–ÆKassa. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞] –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {callback_query.from_user.id}", await get_admins(), bot, username=user.get("username"))

    await callback_query.answer()

@router.message(SubscriptionStates.waiting_for_payment_method_name)
async def waiting_for_payment_method_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    saved_id = data.get('saved_id')
    try:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        await add_payment_method(message.from_user.id, saved_id, message.text, message.text)
        await message.answer(f"üí≥ –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º <b>{message.text}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!", reply_markup=kb.as_markup(), parse_mode="HTML")
        await state.clear()
    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã: {e}", parse_mode="HTML")

@router.message(Command("admin"))
async def admin_menu(message: types.Message):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é
    """
    user = await get_user(message.from_user.id)
    
    if not user or not user.get('is_admin'):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="add_server")
    kb.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="remove_server")
    kb.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏–Ω–±–∞—É–Ω–¥", callback_data="add_inbound")
    kb.button(text="‚ûñ –£–¥–∞–ª–∏—Ç—å –∏–Ω–±–∞—É–Ω–¥", callback_data="remove_inbound")
    kb.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤", callback_data="update_servers")
    kb.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞", callback_data="update_server_info")
    kb.button(text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö", callback_data="servers_info")
    kb.button(text="üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–∞—Ö", callback_data="channels_info")
    kb.button(text="üîë –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="promocodes_info")
    kb.button(text="üîë‚ûñ –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á", callback_data="remove_key")
    kb.button(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    kb.button(text="üíæ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="export_data")
    kb.adjust(2, 2, 1, 1, 1, 1, 1)
    
    stats = await get_system_statistics()
    
    await message.answer(
        "üë®‚Äçüíª <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:</b>\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {stats['total_sales']} ‚ÇΩ\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
        f"üîÑ –£—Å–ø–µ—à–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {stats['total_transactions']}\n"
        f"üîë –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π: {stats['active_keys']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "channels_info")
async def channels_info(callback: types.CallbackQuery):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
        channels_stats = await get_channel_statistics()
        
        if not channels_stats:
            await callback.message.answer("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        total_users = sum(channel['users_count'] for channel in channels_stats)
        
        message_parts = ["üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º:</b>\n"]
        message_parts.append(f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–∞–ª—É
        for i, channel in enumerate(channels_stats, 1):
            channel_name = channel['channel']
            users_count = channel['users_count']
            percentage = channel['percentage']
            
            # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Å—Ç–∞ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
            prefix = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "üìå"
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–∞–Ω–∞–ª–∞
            channel_line = (
                f"{prefix} {channel_name}\n"
                f"‚îî {users_count} –ø–æ–ª—å–∑. ({percentage}%)"
            )
            message_parts.append(channel_line)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        full_message = "\n\n".join(message_parts)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer(
            full_message,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"
        )
    finally:
        await callback.answer()



@router.callback_query(F.data == "add_inbound")
async def add_inbound_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–±–∞—É–Ω–¥–∞ - –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
    """
    servers = await get_all_servers()
    
    kb = InlineKeyboardBuilder()
    for server in servers:
        kb.button(
            text=f"üñ• {server['address']}", 
            callback_data=f"add_inbound_server_{server['id']}"
        )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–±–∞—É–Ω–¥–∞:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("add_inbound_server_"))
async def add_inbound_protocol(callback: types.CallbackQuery, state: FSMContext):
    """
    –í—ã–±–æ—Ä –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω–±–∞—É–Ω–¥–∞
    """
    server_id = callback.data.split("_")[3]
    await state.update_data(server_id=server_id)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="VLESS", callback_data="add_inbound_protocol_vless")
    kb.button(text="Shadowsocks", callback_data="add_inbound_protocol_shadowsocks")
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="add_inbound")
    kb.adjust(2, 1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω–±–∞—É–Ω–¥–∞:",
        reply_markup=kb.as_markup()
    )        

@router.callback_query(F.data.startswith("add_inbound_protocol_"))
async def add_inbound_id(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω–±–∞—É–Ω–¥–∞
    """
    protocol = callback.data.split("_")[3]
    await state.update_data(protocol=protocol)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="add_inbound")
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–Ω–±–∞—É–Ω–¥–∞:",
        reply_markup=kb.as_markup()
    )
    await state.set_state(AdminStates.waiting_for_inbound_id)

@router.message(AdminStates.waiting_for_inbound_id)
async def process_inbound_id(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID –∏ –∑–∞–ø—Ä–æ—Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    """
    try:
        inbound_id = int(message.text)
        if inbound_id <= 0:
            await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
        
        await state.update_data(inbound_id=inbound_id)
        data = await state.get_data()
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="add_inbound")
        
        if data['protocol'] == 'vless':
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ PBK –¥–ª—è VLESS:",
                reply_markup=kb.as_markup()
            )
            await state.set_state(AdminStates.waiting_for_pbk)
        else:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ SNI:",
                reply_markup=kb.as_markup()
            )
            await state.set_state(AdminStates.waiting_for_sni)
            
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.message(AdminStates.waiting_for_pbk)
async def process_pbk(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ PBK –∏ –∑–∞–ø—Ä–æ—Å SID –¥–ª—è VLESS
    """
    pbk = message.text.strip()
    await state.update_data(pbk=pbk)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="add_inbound")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ SID –¥–ª—è VLESS:",
        reply_markup=kb.as_markup()
    )
    await state.set_state(AdminStates.waiting_for_sid)

@router.message(AdminStates.waiting_for_sid)
async def process_sid(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ SID –∏ –∑–∞–ø—Ä–æ—Å SNI
    """
    sid = message.text.strip()
    await state.update_data(sid=sid)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="add_inbound")
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ SNI:",
        reply_markup=kb.as_markup()
    )
    await state.set_state(AdminStates.waiting_for_sni)

@router.message(AdminStates.waiting_for_sni)
async def process_sni(message: Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω–±–∞—É–Ω–¥–∞
    """
    sni = message.text.strip()
    data = await state.get_data()
    
    try:
        server = await get_server_by_id(int(data['server_id']))
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∏–Ω–±–∞—É–Ω–¥
        new_inbound = {
            'server_address': server['address'],
            'protocol': data['protocol'],
            'inbound_id': data['inbound_id'],
            'sni': sni,
            'pbk': data.get('pbk'),  # –ë—É–¥–µ—Ç None –¥–ª—è shadowsocks
            'sid': data.get('sid'),  # –ë—É–¥–µ—Ç None –¥–ª—è shadowsocks
            'max_clients': 100
        }

        await add_inbound(new_inbound)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
        
        success_message = (
            f"‚úÖ –ò–Ω–±–∞—É–Ω–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üñ• –°–µ—Ä–≤–µ—Ä: {server['address']}\n"
            f"üì° –ü—Ä–æ—Ç–æ–∫–æ–ª: {data['protocol']}\n"
            f"üî¢ ID: {data['inbound_id']}\n"
            f"üåê SNI: {sni}"
        )
        
        if data['protocol'] == 'vless':
            success_message += f"\nüîë PBK: {data['pbk']}\nüîë SID: {data['sid']}"
        
        await message.answer(
            success_message,
            reply_markup=kb.as_markup()
        )
        
        await state.clear()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω–±–∞—É–Ω–¥–∞: {str(e)}")

@router.callback_query(F.data == "remove_inbound")
async def remove_inbound_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–±–∞—É–Ω–¥–∞ - –≤—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
    """
    servers = await get_all_servers()
    
    kb = InlineKeyboardBuilder()
    for server in servers:
        kb.button(
            text=f"üñ• {server['address']}", 
            callback_data=f"remove_inbound_server_{server['id']}"
        )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–±–∞—É–Ω–¥–∞:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("remove_inbound_server_"))
async def select_inbound_for_removal(callback: types.CallbackQuery, state: FSMContext):
    """
    –í—ã–±–æ—Ä –∏–Ω–±–∞—É–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    server_id = callback.data.split("_")[3]
    server = await get_server_by_id(int(server_id))
    
    inbounds = await get_server_inbounds(server['address'])
    
    if not inbounds:
        await callback.answer("‚ùå –£ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç –∏–Ω–±–∞—É–Ω–¥–æ–≤", show_alert=True)
        return
    
    kb = InlineKeyboardBuilder()
    for inbound in inbounds:
        kb.button(
            text=f"üì° {inbound['protocol']} (ID: {inbound['inbound_id']})", 
            callback_data=f"confirm_remove_inbound_{inbound['id']}"
        )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="remove_inbound")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–±–∞—É–Ω–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("confirm_remove_inbound_"))
async def confirm_inbound_removal(callback: types.CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–Ω–±–∞—É–Ω–¥–∞
    """
    inbound_id = int(callback.data.split("_")[3])
    
    try:
        await remove_inbound(inbound_id)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
        
        await callback.message.edit_text(
            "‚úÖ –ò–Ω–±–∞—É–Ω–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=kb.as_markup()
        )
        
    except Exception as e:
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω–±–∞—É–Ω–¥–∞: {str(e)}", show_alert=True)



@router.callback_query(F.data == "remove_key")
async def remove_key_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ - –∑–∞–ø—Ä–æ—Å ID/username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")

    await callback.message.edit_text(
        "üë§ –í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=kb.as_markup()
    )
    await state.set_state(AdminKeyRemovalStates.waiting_for_user)

def determine_device_type(device_id: str) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ device_id
    """
    device_id = device_id.lower()
    if 'iphone' in device_id or 'ipad' in device_id or 'ios' in device_id:
        return 'ios'
    elif 'androidtv' in device_id:
        return 'androidtv'
    elif 'android' in device_id:
        return 'android'
    elif 'windows' in device_id:
        return 'windows'
    elif 'mac' in device_id or 'macos' in device_id:
        return 'mac'
    return 'other'  

@router.message(AdminKeyRemovalStates.waiting_for_user)
async def show_user_keys(message: Message, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username
    user_input = message.text.strip()
    if user_input.isdigit():
        target_user = await get_user(int(user_input))
    else:
        username = user_input.lstrip('@')
        target_user = await get_user_by_username(username)

    if not target_user:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="remove_key")
        await message.answer(
            "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=kb.as_markup()
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_keys = await get_user_keys(target_user['user_id'])
    if not user_keys:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="remove_key")
        await message.answer(
            "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π",
            reply_markup=kb.as_markup()
        )
        return

    await state.update_data(target_user_id=target_user['user_id'])
    
    keys_by_device = {
        "ios": [],
        "androidtv": [],
        "android": [],
        "windows": [],
        "mac": []
    }
    
    for key_data in user_keys:
        key_value, device_id, expiration_date = key_data
        device_type = determine_device_type(device_id)  
        if device_type in keys_by_device:
            keys_by_device[device_type].append({
                'key': key_value,
                'device_id': device_id,
                'expiration_date': expiration_date
            })

    keys_text = f"üîë –ö–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user.get('username', target_user['user_id'])}:\n\n"
    
    kb = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    device_icons = {
        "ios": "üì± iOS",
        "android": "ü§ñ Android",
        "androidtv": "üì∫ Android TV",
        "windows": "üñ• Windows",
        "mac": "üçé macOS"
    }

    for device, keys in keys_by_device.items():
        if keys:
            kb.button(
                text=f"{device_icons[device]} ({len(keys)})", 
                callback_data=f"show_remove_keys_{device}_1"
            )
            keys_text += f"{device_icons[device]}: {len(keys)} –∫–ª—é—á–µ–π\n"

    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="remove_key")
    kb.adjust(2, 1)
    await state.update_data(target_user_id=target_user['user_id'], device_type=device, page=1)
    await message.answer(
        keys_text,
        reply_markup=kb.as_markup()
    )


@router.callback_query(F.data.startswith("show_remove_keys"))
async def show_device_keys_2(callback: types.CallbackQuery, state: FSMContext):
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª—é—á–µ–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    try:

        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ callback_data
        # –§–æ—Ä–º–∞—Ç: "show_keys_remove_ios_1" –∏–ª–∏ "show_keys_remove_android_1" –∏ —Ç.–¥.
        _, _, _, device_type, page_num = callback.data.split("_")
        parts = callback.data.split("_")
        page = int(parts[-1])    # –ü–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ state
        data = await state.get_data()
        target_user_id = data['target_user_id']
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_keys = await get_user_keys(target_user_id)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        device_keys = []
        for key_data in all_keys:
            key_value, device_id, expiration_date = key_data
            if determine_device_type(device_id) == device_type:
                device_keys.append({
                    'key': key_value,
                    'device_id': device_id,
                    'expiration_date': expiration_date
                })
        
        if not device_keys:
            await callback.answer("–ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        KEYS_PER_PAGE = 5
        total_pages = (len(device_keys) + KEYS_PER_PAGE - 1) // KEYS_PER_PAGE
        start_idx = (page - 1) * KEYS_PER_PAGE
        end_idx = start_idx + KEYS_PER_PAGE
        current_page_keys = device_keys[start_idx:end_idx]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = InlineKeyboardBuilder()
        kb.button(
            text="üí£ –£–¥–∞–ª–∏—Ç—å –í–°–ï –∫–ª—é—á–∏", 
            callback_data=f"confirm_remove_all_{device_type}"
        )        
        device_names = {
            "ios": "üì± iOS",
            "android": "ü§ñ Android",
            "androidtv": "üì∫ Android TV",
            "windows": "üñ• Windows",
            "mac": "üçé macOS"
        }
        
        for key in current_page_keys:
            expiry_date = key['expiration_date']
            print(key)
            device, unique_id, uniquie_uuid, address, parts = extract_key_data(key['key'])
            print(unique_id, expiry_date, address)
            if isinstance(expiry_date, (int, float)):
                expiry_date = datetime.fromtimestamp(expiry_date/1000).strftime('%d.%m.%Y')
            kb.button(
                text=f"üóë –ö–ª—é—á {unique_id}", 
                callback_data=f"remove_key_{unique_id}"
            )

        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_row = []
        if page > 1:
            nav_row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è", 
                callback_data=f"show_remove_keys_{device_type}_{page-1}" 
            ))
        if page < total_pages:
            nav_row.append(InlineKeyboardButton(
                text="‚û°Ô∏è", 
                callback_data=f"show_remove_keys_{device_type}_{page+1}"  
            ))
        if nav_row:
            kb.row(*nav_row)

        
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º", callback_data="remove_key")
        kb.adjust(1)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = (
            f"üîë {device_names[device_type]} (—Å—Ç—Ä. {page}/{total_pages})\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
        )

        await callback.message.edit_text(
            text=message_text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error in show_device_keys: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–ª—é—á–µ–π", show_alert=True)

@router.callback_query(F.data.startswith("confirm_remove_all_"))
async def remove_all_keys(callback: types.CallbackQuery, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    device_type = callback.data.split("_")[3]
    
    confirm_kb = InlineKeyboardBuilder()
    confirm_kb.button(
        text="üí£ –ü–û–î–¢–í–ï–†–î–ò–¢–¨ –£–î–ê–õ–ï–ù–ò–ï –í–°–ï–•", 
        callback_data=f"final_remove_all_{device_type}"
    )
    confirm_kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="remove_key")
    
    await callback.message.edit_text(
        "üö® –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∫–ª—é—á–∏ —ç—Ç–æ–≥–æ —Ç–∏–ø–∞?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=confirm_kb.as_markup()
    )

@router.callback_query(F.data.startswith("final_remove_all_"))
async def final_remove_all_keys(callback: types.CallbackQuery, state: FSMContext):
    device_type = callback.data.split("_")[3]
    data = await state.get_data()
    target_user_id = data['target_user_id']
    
    try:
        all_keys = await get_user_keys(target_user_id)
        deleted_count = 0
        skipped_count = 0  # –°—á–µ—Ç—á–∏–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        
        for key_data in all_keys:
            key_value, device_id, _ = key_data
            if determine_device_type(device_id) == device_type:
                try:
                    device, unique_id, uuid, address, parts = extract_key_data(key_value)
                    protocol = 'ss' if key_value.startswith('ss://') else 'vless'
                    
                    server = await get_server_by_address(
                        address, 
                        protocol="shadowsocks" if protocol == 'ss' else "vless"
                    )
                    api = AsyncApi(
                        f"http://{server['address']}",
                        server['username'],
                        server['password'],
                        use_tls_verify=False
                    )
                    
                    await api.login()
                    client = await api.client.get_by_email(f"{parts[0]}_{parts[1]}_{parts[2]}")
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
                    if not client:
                        skipped_count += 1
                        continue
                        
                    if protocol == 'ss':
                        await api.client.delete(
                            inbound_id=client.inbound_id, 
                            client_uuid=str(client.email)
                        )
                    else:
                        await api.client.delete(
                            inbound_id=client.inbound_id,
                            client_uuid=str(uuid)
                        )
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
                    try:
                        clients_count = await get_server_count_by_address(
                            address, 
                            client.inbound_id, 
                            protocol="shadowsocks" if protocol == 'ss' else "vless"
                        )
                        await update_server_clients_count(
                            address, 
                            clients_count - 1, 
                            client.inbound_id
                        )
                    except Exception as update_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞: {update_error}")
                    
                    await remove_key_bd(key_value)
                    deleted_count += 1
                    
                except Exception as key_error:
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ {key_value}: {key_error}")
                    skipped_count += 1

        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
        
        result_message = (
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ: {deleted_count}\n"
            f"‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}\n"
            f"‚ûñ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {skipped_count}"
        )
        
        await callback.message.edit_text(
            result_message,
            reply_markup=kb.as_markup()
        )
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–µ–π", show_alert=True)


@router.callback_query(F.data.startswith("remove_key_"))
async def confirm_key_removal(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
    """
    unique_id = callback.data.split("_")[2]
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_remove_key_{unique_id}")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="remove_key")
    kb.adjust(2)

    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∫–ª—é—á?\n"
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ—Ç–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ VPN.",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("confirm_remove_key_"))
async def remove_key_final(callback: types.CallbackQuery, state: FSMContext):
    """
    –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
    """
    unique_id = callback.data.split("_")[3]
    
    try:
        key = await get_key_by_uniquie_id(unique_id)
        
        device, unique_id, uniquie_uuid, address, parts = extract_key_data(key['key'])
        protocol = 'ss' if key['key'].startswith('ss://') else 'vless'
        server = await get_server_by_address(address, protocol = "shadowsocks" if protocol == 'ss' else "vless")
        api = AsyncApi(
                    f"http://{server['address']}",
                    server['username'],
                    server['password'],
                    use_tls_verify=False
        )
        await api.login()

        email = f"{parts[0]}_{parts[1]}_{parts[2]}"
        client = await api.client.get_by_email(email)

        try:    
            if protocol == 'ss':
                await api.client.delete(inbound_id = client.inbound_id, client_uuid=str(client.email))
            else:
                await api.client.delete(inbound_id = client.inbound_id, client_uuid=str(uniquie_uuid))
            await remove_key_bd(key['key'])
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞", show_alert=True)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
        
        await callback.message.edit_text(
            "‚úÖ –ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
            reply_markup=kb.as_markup()
        )
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞", show_alert=True)

@router.message(Command("find"))
async def find_user(message: Message, state: FSMContext):
    """
    –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á—É, username –∏–ª–∏ user_id –∏ –≤—ã–≤–æ–¥ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ.
    """
    user = await get_user(message.from_user.id)
    if not user.get('is_admin'):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /find –∫–ª—é—á/username/user_id")
        return

    query = args[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ query —á–∏—Å–ª–æ–º (user_id) –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π (–∫–ª—é—á –∏–ª–∏ username)
    if query.isdigit():
        user_info = await get_user_info(user_id=int(query))
    else:
        user_info = await get_user_info(key=query) or await get_user_info(username=query)

    if not user_info:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
        f"üÜî ID: {user_info['user_id']}\n"
        f"üë§ Username: {user_info['username']}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_info['balance']}‚ÇΩ\n"
        f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞: {user_info['subscription_type']}\n"
        f"üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫—É–ø–ª–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏: {user_info['subscription_end']}\n"
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {user_info['referral_count']}\n"
        f"üîë –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {user_info['keys_count']}\n"
        f"üîë –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏(–ø—Ä–æ–º–æ–∫–æ–¥—ã): {user_info['free_keys_count']}\n"
        f"üéÅ –ü—Ä–æ–º–æ –¥–Ω–∏: {user_info['promo_days']}\n"
    )

    await message.answer(user_text, parse_mode="HTML")


@router.message(Command("balance"))
async def change_balance(message: Message):
    """
    –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –§–æ—Ä–º–∞—Ç: /balance id/username amount
    amount –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º
    """
    admin = await get_user(message.from_user.id)
    if not admin.get('is_admin'):
        return
    
    try:
        args = message.text.split()
        if len(args) != 3:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /balance id/username —Å—É–º–º–∞\n"
                "–ü—Ä–∏–º–µ—Ä: /balance 123456789 1000\n"
                "–î–ª—è —Å–Ω—è—Ç–∏—è –¥–µ–Ω–µ–≥ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–∏–Ω—É—Å: /balance 123456789 -1000"
            )
            return
        
        target = args[1]
        try:
            amount = int(args[2])
        except ValueError:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º")
            return
        
        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID –∏–ª–∏ username
        if target.isdigit():
            user = await get_user(int(target))
        else:
            user = await get_user_by_username(target.lstrip('@'))
            
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∏ –≤—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π
        current_balance = int(user['balance'])
        new_balance = current_balance + amount
        
        if new_balance < 0:
            await message.answer(
                f"‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_balance}‚ÇΩ"
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await update_balance(user['user_id'], new_balance)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        try:
            if amount > 0:
                balance_message = (
                    f"üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n"
                    f"‚îî –°—É–º–º–∞: +{amount:,}‚ÇΩ\n"
                    f"‚îî –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:,}‚ÇΩ"
                )
            else:
                balance_message = (
                    f"üí∞ <b>–°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n"
                    f"‚îî –°—É–º–º–∞: {amount:,}‚ÇΩ\n"
                    f"‚îî –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:,}‚ÇΩ"
                )
                
            await message.bot.send_message(
                user['user_id'],
                balance_message,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        action = "–ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞" if amount > 0 else "—É–º–µ–Ω—å—à–µ–Ω –Ω–∞"
        amount_abs = abs(amount)
        await message.answer(
            f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.get('username', user['user_id'])} {action} {amount_abs:,}‚ÇΩ\n"
            f"‚îî –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:,}‚ÇΩ"
        )
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        logger.info(
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª –±–∞–ª–∞–Ω—Å "
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['user_id']} –Ω–∞ {amount:,}‚ÇΩ. "
            f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:,}‚ÇΩ"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

@router.callback_query(F.data == "export_data")
async def export_data(callback: types.CallbackQuery):
    """
    –≠–∫—Å–ø–æ—Ä—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Excel —Ñ–∞–π–ª
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await update_user_pay_count()
        users = await get_all_users()
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        referral_income = {}
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for user in users:
            referrer_id = user.get('referrer_id')
            if referrer_id and referrer_id != 0:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                transactions = await get_user_transactions(user['user_id'])
                # –°—É–º–º–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                total_amount = sum(tx['amount'] for tx in transactions if tx['status'] == 'succeeded')
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–º–º—É –∫ –¥–æ—Ö–æ–¥—É —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                if referrer_id not in referral_income:
                    referral_income[referrer_id] = 0
                referral_income[referrer_id] += total_amount
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Ö–æ–¥–µ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∫ –¥–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user in users:
            user['referral_income'] = referral_income.get(user['user_id'], 0)
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        df = pd.DataFrame(users)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã
        def format_date(date_str):
            if pd.isna(date_str) or date_str == "–ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏" or not date_str:
                return "—Å–º. –≤ 3x-ui"
            try:
                # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
                if isinstance(date_str, (int, float)):
                    return datetime.fromtimestamp(date_str/1000).strftime('%Y-%m-%d %H:%M:%S')
                return pd.to_datetime(date_str).strftime('%Y-%m-%d %H:%M:%S')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã: {e}")
                return str(date_str)

        df['subscription_end'] = df['subscription_end'].apply(format_date)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏
        column_names = {
            'user_id': 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'username': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            'balance': '–ë–∞–ª–∞–Ω—Å',
            'subscription_type': '–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏',
            'subscription_end': '–û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏',
            'is_admin': '–ê–¥–º–∏–Ω',
            'referrer_id': 'ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞',
            'referral_count': '–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
            'keys_count': '–í—Å–µ–≥–æ –∫–ª—é—á–µ–π',
            'free_keys_count': '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏',
            'promo_days': '–ü—Ä–æ–º–æ –¥–Ω–∏',
            'from_channel': '–ö–∞–Ω–∞–ª',
            'pay_count': '–ö–æ–ª-–≤–æ –ø–ª–∞—Ç–µ–∂–µ–π',
            'referral_income': '–î–æ—Ö–æ–¥ —Å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'
        }
        df = df.rename(columns=column_names)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
        filename = f"users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
        df.to_excel(filename, index=False, engine='openpyxl')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            document=FSInputFile(filename),
            caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)

        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
        
        await callback.message.answer(
            "‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!",
            reply_markup=kb.as_markup()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
        )

    await callback.answer()

def get_group_name(group):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    """
    group_names = {
        "all": "–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
        "unused_free_keys": "–ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏",
        "zero_traffic": "–ù—É–ª–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫",
        "balance_99": "–ë–∞–ª–∞–Ω—Å 99‚ÇΩ",
        "expiring_subscriptions": "–ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
        "ip_server": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞"  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
    }
    return group_names.get(group, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞ ({group})")

@router.callback_query(F.data == "admin_broadcast")
async def start_broadcast(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    kb = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã
    kb.button(text="üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="broadcast_group_all")
    kb.button(text="üÜì –ù–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∫–ª—é—á–∏", callback_data="broadcast_group_unused_free_keys")
    kb.button(text="üîÑ –ù—É–ª–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫", callback_data="broadcast_group_zero_traffic")
    kb.button(text="üí∞ –ë–∞–ª–∞–Ω—Å 99‚ÇΩ", callback_data="broadcast_group_balance_99")
    kb.button(text="‚è≥ –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="broadcast_group_expiring_subscriptions")
    kb.button(text="üîë –ü–æ –∞–π–ø–∏ —Å–µ—Ä–≤–µ—Ä–∞", callback_data="broadcast_group_ip_server")
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    kb.adjust(1)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    
    await callback.message.edit_text(
        "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AdminBroadcastStates.select_group)

@router.callback_query(AdminBroadcastStates.select_group, F.data.startswith("broadcast_group_"))
async def select_broadcast_group(callback: types.CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã –∏–∑ callback_data
    group = callback.data.replace("broadcast_group_", "")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(broadcast_group=group)
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≥—Ä—É–ø–ø–∞ –ø–æ IP —Å–µ—Ä–≤–µ—Ä–∞, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º IP
    if group == "ip_server":
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
        
        await callback.message.edit_text(
            "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –∏–ª–∏ –¥–æ–º–µ–Ω —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∫–ª—é—á–∞–º–∏ –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ:",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        await state.set_state(AdminBroadcastStates.waiting_for_ip)
        return
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    
    await callback.message.edit_text(
        "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"–ì—Ä—É–ø–ø–∞: <b>{get_group_name(group)}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "‚Ä¢ <b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n"
        "‚Ä¢ <i>–ö—É—Ä—Å–∏–≤</i>\n"
        "‚Ä¢ <u>–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ</u>\n"
        "‚Ä¢ <code>–ú–æ–Ω–æ—à–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</code>",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AdminBroadcastStates.waiting_for_message)

@router.message(AdminBroadcastStates.waiting_for_ip)
async def process_server_ip(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ IP-–∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    """
    server_address = message.text.strip()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º IP-–∞–¥—Ä–µ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(server_address=server_address)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    
    await message.answer(
        "üì¢ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"–ì—Ä—É–ø–ø–∞: <b>{get_group_name('ip_server')}</b>\n"
        f"–°–µ—Ä–≤–µ—Ä: <b>{server_address}</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:\n"
        "‚Ä¢ <b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n"
        "‚Ä¢ <i>–ö—É—Ä—Å–∏–≤</i>\n"
        "‚Ä¢ <u>–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ</u>\n"
        "‚Ä¢ <code>–ú–æ–Ω–æ—à–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</code>",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AdminBroadcastStates.waiting_for_message)

@router.message(AdminBroadcastStates.waiting_for_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º HTML-—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(broadcast_text=message.html_text)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞", callback_data="add_broadcast_media")
    kb.button(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_broadcast_media")
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    kb.adjust(1)
    
    await message.answer(
        "üì∏ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª –∫ —Ä–∞—Å—Å—ã–ª–∫–µ?",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "add_broadcast_media")
async def add_broadcast_media(callback: types.CallbackQuery, state: FSMContext):
    """
    –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –∫ —Ä–∞—Å—Å—ã–ª–∫–µ
    """
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    
    await callback.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª:\n"
        "‚Ä¢ –§–æ—Ç–æ\n"
        "‚Ä¢ –í–∏–¥–µ–æ\n"
        "‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç",
        reply_markup=kb.as_markup()
    )
    await state.set_state(AdminBroadcastStates.waiting_for_media)

@router.callback_query(F.data == "skip_broadcast_media")
async def skip_broadcast_media(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
    """
    data = await state.get_data()
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast")
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    
    await callback.message.edit_text(
        "üì¢ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n"
        f"{data.get('broadcast_text', '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AdminBroadcastStates.confirm_broadcast)

@router.message(AdminBroadcastStates.waiting_for_media, 
                F.photo | F.video | F.document)
async def process_broadcast_media(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
    if message.photo:
        file_id = message.photo[-1].file_id
        media_type = "photo"
    elif message.video:
        file_id = message.video.file_id
        media_type = "video"
    elif message.document:
        file_id = message.document.file_id
        media_type = "document"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞
    await state.update_data(
        broadcast_media_id=file_id, 
        broadcast_media_type=media_type
    )
    
    data = await state.get_data()
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast")
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º
    if media_type == "photo":
        await message.answer_photo(
            photo=file_id,
            caption=f"üì¢ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{data.get('broadcast_text', '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
    elif media_type == "video":
        await message.answer_video(
            video=file_id,
            caption=f"üì¢ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{data.get('broadcast_text', '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
    elif media_type == "document":
        await message.answer_document(
            document=file_id,
            caption=f"üì¢ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{data.get('broadcast_text', '–¢–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
    
    await state.set_state(AdminBroadcastStates.confirm_broadcast)

@router.callback_query(F.data == "confirm_broadcast")
async def confirm_broadcast(callback: types.CallbackQuery, state: FSMContext, bot: Bot):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    data = await state.get_data()
    broadcast_text = data.get('broadcast_text')
    broadcast_media_id = data.get('broadcast_media_id')
    broadcast_media_type = data.get('broadcast_media_type')
    broadcast_group = data.get('broadcast_group', 'all')
    server_address = data.get('server_address')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    if broadcast_group == 'ip_server' and server_address:
        target_users = await get_users_by_server_address(server_address)
    else:
        target_users = await get_target_users(broadcast_group)
    
    success_count = 0
    error_count = 0
    
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    group_name = get_group_name(broadcast_group)
    if broadcast_group == 'ip_server' and server_address:
        group_name = f"{group_name} ({server_address})"
        
    progress_message = await callback.message.answer(
        f"üîÑ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã '{group_name}'...\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(target_users)}"
    )
    
    for user_id in target_users:
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –º–µ–¥–∏–∞
            if broadcast_media_id:
                if broadcast_media_type == "photo":
                    await bot.send_photo(
                        chat_id=user_id, 
                        photo=broadcast_media_id, 
                        caption=broadcast_text, 
                        parse_mode="HTML"
                    )
                elif broadcast_media_type == "video":
                    await bot.send_video(
                        chat_id=user_id, 
                        video=broadcast_media_id, 
                        caption=broadcast_text, 
                        parse_mode="HTML"
                    )
                elif broadcast_media_type == "document":
                    await bot.send_document(
                        chat_id=user_id, 
                        document=broadcast_media_id, 
                        caption=broadcast_text, 
                        parse_mode="HTML"
                    )
            else:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–∞
                await bot.send_message(
                    chat_id=user_id, 
                    text=broadcast_text, 
                    parse_mode="HTML",
                    disable_web_page_preview=True
                )
            
            success_count += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if success_count % 10 == 0:
                try:
                    await progress_message.edit_text(
                        f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}/{len(target_users)}"
                    )
                except Exception:
                    pass
                
        except Exception as e:
            error_count += 1
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
    await progress_message.delete()
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    group_display = group_name
    await callback.message.answer(
        f"üìä <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
        f"–ì—Ä—É–ø–ø–∞: <b>{group_display}</b>\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {error_count}",
        parse_mode="HTML"
    )
    
    await state.clear()

async def get_target_users(group):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    
    Args:
        group (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã
        
    Returns:
        list: –°–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    if group == 'all':
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await get_all_users()
        return [user['user_id'] for user in users]
    
    # –î–ª—è –≥—Ä—É–ø–ø—ã –Ω–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
    if group == 'unused_free_keys':
        return await get_users_with_unused_free_keys()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø
    segments = await get_user_segments()
    
    if group == 'zero_traffic':
        # –î–ª—è zero_traffic —É –Ω–∞—Å –∫–æ—Ä—Ç–µ–∂–∏ (user_id, key), –Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ user_id
        return [user_id for user_id, _ in segments['zero_traffic']]
    elif group == 'balance_99':
        return segments['balance_99']
    elif group == 'expiring_subscriptions':
        return segments['expiring_subscriptions']
    
    # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    return []

@router.callback_query(F.data.startswith("promocodes_info"))
async def promocodes_info(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–æ–∫–æ–¥–∞—Ö –∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –Ω–∏–º–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback.data.split('_')[-1]) if callback.data != "promocodes_info" else 1
    items_per_page = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    promocodes = await get_all_promocodes()
    
    kb = InlineKeyboardBuilder()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if promocodes:
        total_pages = (len(promocodes) + items_per_page - 1) // items_per_page
        start_idx = (page - 1) * items_per_page
        end_idx = start_idx + items_per_page
        current_page_promocodes = promocodes[start_idx:end_idx]
        
        promo_text = f"üìã <b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (—Å—Ç—Ä. {page}/{total_pages}):</b>\n\n"
        
        for promo in current_page_promocodes:
            promo_id, code, user_id, amount, gift_balance, gift_days, expiration_date = promo
            promo_text += (
                f"üîë <b>{code}</b>\n"
                f"‚îî üÜî ID: {promo_id}\n"
                f"‚îî üë• –ú–∞–∫—Å. –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {amount}\n"
                f"‚îî üí∞ –ë–æ–Ω—É—Å: {gift_balance}‚ÇΩ\n"
                f"‚îî üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expiration_date}\n\n"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if page > 1:
            nav_buttons.append(InlineKeyboardButton(
                text="‚óÄÔ∏è", 
                callback_data=f"promocodes_info_{page-1}"
            ))
        if page < total_pages:
            nav_buttons.append(InlineKeyboardButton(
                text="‚ñ∂Ô∏è", 
                callback_data=f"promocodes_info_{page+1}"
            ))
        if nav_buttons:
            kb.row(*nav_buttons)
    else:
        promo_text = "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    kb.button(text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promocode")
    kb.button(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="delete_promocode")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    kb.adjust(2, 1, 1)  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    
    try:
        await callback.message.edit_text(
            promo_text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        if "message is not modified" in str(e).lower():
            pass
        else:
            raise e


@router.callback_query(F.data == "delete_promocode")
async def start_delete_promocode(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    promocodes = await get_all_promocodes()
    
    kb = InlineKeyboardBuilder()
    for promo in promocodes:
        promo_id, code, _, amount, gift_balance, gift_days, expiration_date = promo
        kb.button(
            text=f"üóë {code} ({amount} –∏—Å–ø.)", 
            callback_data="confirm_delete_promo"
        )
        await state.update_data({
            "promo_id": promo_id,
            "promo_code": code,
            "amount": amount,
            "gift_balance": gift_balance,
            "gift_days": gift_days,
            "expiration_date": expiration_date
        })
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="promocodes_info")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "confirm_delete_promo")
async def confirm_delete_promocode(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ –∏–∑ state
    data = await state.get_data()
    
    promo_code = data.get('promo_code')
    amount = data.get('amount')
    gift_balance = data.get('gift_balance')
    gift_days = data.get('gift_days')
    expiration_date = data.get('expiration_date')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    promo = await get_promocode(promo_code)
    
    if promo:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        await remove_promocode(promo_code)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="promocodes_info")
        
        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ <b>{promo_code}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!\n\n"
            f"üìä –î–µ—Ç–∞–ª–∏:\n"
            f"‚îî –û—Å—Ç–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π: {amount}\n"
            f"‚îî –ë–æ–Ω—É—Å: {gift_balance}‚ÇΩ\n"
            f"‚îî –î–Ω–µ–π VPN: {gift_days}\n"
            f"‚îî –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {expiration_date}",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        
        # –û—á–∏—â–∞–µ–º state –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        await state.clear()
    else:
        await callback.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

@router.callback_query(F.data == "create_promocode")
async def start_create_promocode(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="promocodes_info")
    
    await callback.message.edit_text(
        "üéÅ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏):",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(PromoCodeAdminStates.waiting_promo_code)

@router.message(PromoCodeAdminStates.waiting_promo_code)
async def process_promo_code(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    """
    promo_code = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ –∑–∞–Ω—è—Ç
    existing_promo = await get_promocode(promo_code)
    if existing_promo:
        await message.answer(
            "‚ùå –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∫–æ–¥:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(promo_code=promo_code)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="promocodes_info")
    
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞:",
        reply_markup=kb.as_markup()
    )
    await state.set_state(PromoCodeAdminStates.waiting_promo_amount)

@router.message(PromoCodeAdminStates.waiting_promo_amount)
async def process_promo_amount(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
    """
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError
        
        await state.update_data(amount=amount)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="promocodes_info")
        
        await message.answer(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–Ω—É—Å–∞ –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=kb.as_markup()
        )
        await state.set_state(PromoCodeAdminStates.waiting_promo_gift_balance)
    
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:")

@router.message(PromoCodeAdminStates.waiting_promo_gift_balance)
async def process_promo_gift_balance(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –±–æ–Ω—É—Å–∞
    """
    try:
        gift_balance = int(message.text)
        if gift_balance < 0:
            raise ValueError
        
        await state.update_data(gift_balance=gift_balance)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="promocodes_info")
        
        await message.answer(
            "üï∞ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è VPN:",
            reply_markup=kb.as_markup()
        )
        await state.set_state(PromoCodeAdminStates.waiting_promo_gift_days)
    
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –±–æ–Ω—É—Å–∞:")     

@router.message(PromoCodeAdminStates.waiting_promo_gift_days)
async def process_promo_gift_days(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π –¥–ª—è VPN
    """
    try:
        gift_days = int(message.text)        
        await state.update_data(gift_days=gift_days)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="promocodes_info")
        
        await message.answer(
            "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–ì–ì–ì–ì-–ú–ú-–î–î):",
            reply_markup=kb.as_markup()
        )
        await state.set_state(PromoCodeAdminStates.waiting_promo_expiration_date)
    
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:")

@router.message(PromoCodeAdminStates.waiting_promo_expiration_date)
async def process_promo_expiration_date(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    """
    try:
        expiration_date = datetime.strptime(message.text, "%Y-%m-%d")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
        data = await state.get_data()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        await add_promocode(
            code=data['promo_code'], 
            user_id=message.from_user.id,  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥
            amount=data['amount'], 
            gift_balance=data['gift_balance'], 
            gift_days=data['gift_days'],  # –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ VPN
            expiration_date=expiration_date.isoformat()
        )
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="promocodes_info")
        
        await message.answer(
            "‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üîë –ö–æ–¥: {data['promo_code']}\n"
            f"üí∞ –ë–æ–Ω—É—Å: {data['gift_balance']}‚ÇΩ\n"
            f"üï∞ –î–Ω–µ–π VPN: {data['gift_days']}\n"
            f"üìÖ –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {message.text}",
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
        
        await state.clear()
    
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")

@router.callback_query(F.data == "remove_server")
async def show_servers_to_remove(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    servers = await get_all_servers()
    
    if not servers:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤",
            reply_markup=kb.as_markup()
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã –ø–æ ID –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    grouped_servers = {}
    for server in servers:
        if server['id'] not in grouped_servers:
            grouped_servers[server['id']] = {
                'address': server['address'],
                'id': server['id'],
                'total_clients': 0,
                'total_max': 0
            }
        if server['protocol']:  # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–±–∞—É–Ω–¥—ã
            grouped_servers[server['id']]['total_clients'] += server['clients_count']
            grouped_servers[server['id']]['total_max'] += server['max_clients']
    
    kb = InlineKeyboardBuilder()
    for server_data in grouped_servers.values():
        kb.button(
            text=f"üñ• {server_data['address']} ({server_data['total_clients']}/{server_data['total_max']})", 
            callback_data=f"del_server_{server_data['id']}"
        )
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üóë <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("del_server_"))
async def remove_server_confirm(callback: types.CallbackQuery):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    server_id = int(callback.data.split("_")[2])
    servers = await get_all_servers()
    server_inbounds = [s for s in servers if s['id'] == server_id]
    
    if not server_inbounds:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    server = server_inbounds[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∏–Ω–±–∞—É–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤—Å–µ–º –∏–Ω–±–∞—É–Ω–¥–∞–º
    total_clients = sum(s['clients_count'] for s in server_inbounds if s['protocol'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–±–∞—É–Ω–¥–∞—Ö
    inbounds_info = []
    for inbound in server_inbounds:
        if inbound['protocol']:
            inbounds_info.append(
                f"‚îî {inbound['protocol']}: {inbound['clients_count']} –∫–ª–∏–µ–Ω—Ç–æ–≤"
            )
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_del_{server_id}")
    kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="remove_server")
    kb.adjust(2)
    
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n"
        f"–°–µ—Ä–≤–µ—Ä: {server['address']}\n"
        f"–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–±–∞—É–Ω–¥—ã:\n"
        f"{chr(10).join(inbounds_info)}\n\n"
        f"‚ùóÔ∏è –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã –æ—Ç —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞!",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("confirm_del_"))
async def remove_server_final(callback: types.CallbackQuery):
    """
    –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    server_id = int(callback.data.split("_")[2])
    await delete_server(server_id)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back")
    
    await callback.message.edit_text(
        "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("servers_info"))
async def show_servers_info(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    page = int(callback.data.split('_')[-1]) if len(callback.data.split('_')) > 2 else 1
    SERVERS_PER_PAGE = 3
    
    servers = await get_all_servers()
    
    if not servers:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤",
            reply_markup=kb.as_markup()
        )
        return
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã –ø–æ ID
    grouped_servers = {}
    for server in servers:
        if server['id'] not in grouped_servers:
            grouped_servers[server['id']] = []
        grouped_servers[server['id']].append(server)
    
    total_servers = len(grouped_servers)
    total_pages = (total_servers + SERVERS_PER_PAGE - 1) // SERVERS_PER_PAGE
    start_idx = (page - 1) * SERVERS_PER_PAGE
    end_idx = min(start_idx + SERVERS_PER_PAGE, total_servers)
    
    current_page_server_ids = list(grouped_servers.keys())[start_idx:end_idx]
    
    info_text = f"üìä <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö (—Å—Ç—Ä. {page}/{total_pages}):</b>\n\n"
    
    for server_id in current_page_server_ids:
        server_group = grouped_servers[server_id]
        first_server = server_group[0]
        status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if first_server['is_active'] else "üî¥ –û—Ç–∫–ª—é—á–µ–Ω"
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –º–∞–∫—Å–∏–º—É–º –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        total_clients = sum(s['clients_count'] for s in server_group if s['protocol'])
        total_max = sum(s['max_clients'] for s in server_group if s['protocol'])
        total_load = (total_clients / total_max * 100) if total_max > 0 else 0
        
        info_text += (
            f"üñ• <b>–°–µ—Ä–≤–µ—Ä #{first_server['id']}</b>\n"
            f"‚îú üìç –ê–¥—Ä–µ—Å: {first_server['address']}\n"
            f"‚îú üîå –ü–æ—Ä—Ç: 2053\n"
            f"‚îú üåç –°—Ç—Ä–∞–Ω–∞: {first_server['country'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"‚îú üì° –°—Ç–∞—Ç—É—Å: {status}\n"
            f"‚îú üë• –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}/{total_max}\n"
            f"‚îî üìä –û–±—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {total_load:.1f}%\n"
        )
        info_text += "    –ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–µ—Ä–≤–µ—Ä–∞:\n"
        for server in server_group:
            if server['protocol']:
                load_percent = (server['clients_count'] / server['max_clients'] * 100) if server['max_clients'] > 0 else 0
                info_text += (
                    f"   ‚îå üì° –ü—Ä–æ—Ç–æ–∫–æ–ª: {server['protocol']}\n"
                    f"   ‚îú üë• –ö–ª–∏–µ–Ω—Ç–æ–≤: {server['clients_count']}/{server['max_clients']}\n"
                    f"   ‚îú üìä –ó–∞–≥—Ä—É–∑–∫–∞: {load_percent:.1f}%\n"
                    f"   ‚îî üî¢ ID: {server['inbound_id']}\n"
                )
        info_text += "\n"
    
    kb = InlineKeyboardBuilder()
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if page > 1:
        nav_buttons.append(InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=f"servers_info_{page-1}"
        ))
    if page < total_pages:
        nav_buttons.append(InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=f"servers_info_{page+1}"
        ))
    if nav_buttons:
        kb.row(*nav_buttons)
    
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
    kb.adjust(2, 1)
    
    try:
        await callback.message.edit_text(
            info_text,
            reply_markup=kb.as_markup(),
            parse_mode="HTML"
        )
    except Exception as e:
        if "message is not modified" in str(e).lower():
            pass
        else:
            raise e


@router.callback_query(F.data == "update_server_info")
async def update_server_info_row(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    servers = await get_all_servers()

    if not servers:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    grouped_servers = {}
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä—ã –ø–æ ID
    for server in servers:
        if server['id'] not in grouped_servers:
            grouped_servers[server['id']] = []
        grouped_servers[server['id']].append(server)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
    for server_id, server_group in grouped_servers.items():
        first_server = server_group[0]
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –º–∞–∫—Å–∏–º—É–º
        total_clients = sum(s['clients_count'] for s in server_group if s['protocol'])
        total_max = sum(s['max_clients'] for s in server_group if s['protocol'])
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö
        protocols_info = []
        for s in server_group:
            if s['protocol']:
                protocols_info.append(f"{s['protocol']}({s['clients_count']}/{s['max_clients']})")
        
        protocols_str = ", ".join(protocols_info) if protocols_info else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        kb.button(
            text=(f"üñ• {first_server['address']} "
                  f"[{total_clients}/{total_max}] "
                  f"| {protocols_str}"),
            callback_data=f"upd_info_{server_id}"
        )
    
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="servers_info")
    kb.adjust(1)

    await callback.message.edit_text(
        "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("upd_info_"))
async def update_server_info_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ
    """
    server_id = int(callback.data.split("_")[2])
    server = await get_server_by_id(server_id)

    if not server:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–Ω–±–∞—É–Ω–¥—ã —Å–µ—Ä–≤–µ—Ä–∞
    inbounds = await get_server_inbounds(server['address'])
    await state.update_data(server_id=server_id, server_address=server['address'])

    kb = InlineKeyboardBuilder()
    kb.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª", callback_data="change_protocol")
    kb.button(text="üåç –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–∞–Ω—É", callback_data="change_country")
    kb.button(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å ID", callback_data="change_id")
    kb.button(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä—Ç", callback_data="change_port")
    kb.button(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å SNI", callback_data="change_sni")
    kb.button(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å pbk", callback_data="change_pbk")
    kb.button(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å utls", callback_data="change_utls")
    kb.button(text="üî¢ –ò–∑–º–µ–Ω–∏—Ç—å SID", callback_data="change_sid")
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="update_server_info")
    kb.adjust(1)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞—Ö
    protocols_info = ""
    if inbounds:
        for inbound in inbounds:
            protocols_info += (
                f"‚îî {inbound['protocol']} (ID: {inbound['inbound_id']})\n"
            )
    else:
        protocols_info = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–±–∞—É–Ω–¥–æ–≤\n"

    current_info = (
        f"üñ• <b>–°–µ—Ä–≤–µ—Ä {server['address']}</b>\n\n"
        f"üì° –ü—Ä–æ—Ç–æ–∫–æ–ª—ã —Å–µ—Ä–≤–µ—Ä–∞:\n{protocols_info}\n"
        f"üåç –°—Ç—Ä–∞–Ω–∞: {server['country'] or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}"
    )

    await callback.message.edit_text(
        current_info,
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "change_sid")
async def change_sid_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è SID
    """
    data = await state.get_data()
    server_address = data.get('server_address')
    
    inbounds = await get_server_inbounds(server_address)

    if not inbounds:
        await callback.answer("‚ùå –ò–Ω–±–∞—É–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    for inbound in inbounds:
        kb.button(
            text=f"üì° {inbound['protocol']} sid: {inbound['sid']}", 
            callback_data=f"change_sid_inbound_{inbound['id']}"
        )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–±–∞—É–Ω–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è SID:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("change_sid_inbound_"))
async def change_server_sid_input(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ SID –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω–±–∞—É–Ω–¥–∞
    """
    inbound_id = int(callback.data.split("_")[3])
    await state.update_data(selected_inbound_id=inbound_id)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")


    await callback.message.edit_text(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π SID –¥–ª—è –∏–Ω–±–∞—É–Ω–¥–∞:\n\n"
        "‚ÑπÔ∏è SID –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è inbound –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_server_sid_update)

@router.message(AdminStates.waiting_server_sid_update)
async def process_server_sid_update(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ SID —Å–µ—Ä–≤–µ—Ä–∞
    """
    try:
        new_sid = message.text

        data = await state.get_data()
        inbound_id = data.get('selected_inbound_id')
        
        await update_inbound_sid(inbound_id, new_sid)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"upd_info_{data['server_id']}")
        
        await message.answer(
            f"‚úÖ SID –∏–Ω–±–∞—É–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_sid}",
            reply_markup=kb.as_markup()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.callback_query(F.data == "change_utls")
async def change_utls_start(callback: types.CallbackQuery, state: FSMContext):
    """

    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è utls
    """
    data = await state.get_data()
    server_address = data.get('server_address')
    
    inbounds = await get_server_inbounds(server_address)

    if not inbounds:
        await callback.answer("‚ùå –ò–Ω–±–∞—É–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    for inbound in inbounds:
        kb.button(
            text=f"üì° {inbound['protocol']} utls: {inbound['utls']}", 
            callback_data=f"change_utls_inbound_{inbound['id']}"
        )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–±–∞—É–Ω–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è utls:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("change_utls_inbound_"))
async def change_server_utls_input(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ utls –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω–±–∞—É–Ω–¥–∞
    """
    inbound_id = int(callback.data.split("_")[3])
    await state.update_data(selected_inbound_id=inbound_id)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")

    await callback.message.edit_text(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π utls –¥–ª—è –∏–Ω–±–∞—É–Ω–¥–∞:\n\n"
        "‚ÑπÔ∏è utls –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è inbound –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_server_utls_update)

@router.message(AdminStates.waiting_server_utls_update)
async def process_server_utls_update(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ utls —Å–µ—Ä–≤–µ—Ä–∞
    """
    try:
        new_utls = message.text

        data = await state.get_data()
        inbound_id = data.get('selected_inbound_id')
        
        await update_inbound_utls(inbound_id, new_utls)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"upd_info_{data['server_id']}")
        
        await message.answer(
            f"‚úÖ utls –∏–Ω–±–∞—É–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_utls}",
            reply_markup=kb.as_markup()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.callback_query(F.data == "change_pbk")
async def change_pbk_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è pbk
    """
    data = await state.get_data()
    server_address = data.get('server_address')
    
    inbounds = await get_server_inbounds(server_address)

    if not inbounds:
        await callback.answer("‚ùå –ò–Ω–±–∞—É–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    for inbound in inbounds:
        kb.button(
            text=f"üì° {inbound['protocol']} pbk: {inbound['pbk']}", 
            callback_data=f"change_pbk_inbound_{inbound['id']}"
        )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–±–∞—É–Ω–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è pbk:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("change_pbk_inbound_"))
async def change_server_pbk_input(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ pbk –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω–±–∞—É–Ω–¥–∞
    """
    inbound_id = int(callback.data.split("_")[3])
    await state.update_data(selected_inbound_id=inbound_id)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")

    await callback.message.edit_text(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π pbk –¥–ª—è –∏–Ω–±–∞—É–Ω–¥–∞:\n\n"
        "‚ÑπÔ∏è pbk –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è inbound –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_server_pbk_update)

@router.message(AdminStates.waiting_server_pbk_update)
async def process_server_pbk_update(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ pbk —Å–µ—Ä–≤–µ—Ä–∞
    """
    try:
        new_pbk = message.text

        data = await state.get_data()
        inbound_id = data.get('selected_inbound_id')
        
        await update_inbound_pbk(inbound_id, new_pbk)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"upd_info_{data['server_id']}")
        
        await message.answer(
            f"‚úÖ pbk –∏–Ω–±–∞—É–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_pbk}",
            reply_markup=kb.as_markup()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")



@router.callback_query(F.data == "change_sni")
async def change_sni_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
    """
    data = await state.get_data()
    server_address = data.get('server_address')
    
    inbounds = await get_server_inbounds(server_address)

    if not inbounds:
        await callback.answer("‚ùå –ò–Ω–±–∞—É–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    for inbound in inbounds:
        kb.button(
            text=f"üì° {inbound['protocol']} SNI: {inbound['sni']}", 
            callback_data=f"change_sni_inbound_{inbound['id']}"
        )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–±–∞—É–Ω–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è SNI:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("change_sni_inbound_"))
async def change_server_sni_input(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ ID –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω–±–∞—É–Ω–¥–∞
    """
    inbound_id = int(callback.data.split("_")[3])
    await state.update_data(selected_inbound_id=inbound_id)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")

    await callback.message.edit_text(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π SNI –¥–ª—è –∏–Ω–±–∞—É–Ω–¥–∞:\n\n"
        "‚ÑπÔ∏è SNI –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è inbound –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_server_sni_update)

@router.message(AdminStates.waiting_server_sni_update)
async def process_server_sni_update(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ ID —Å–µ—Ä–≤–µ—Ä–∞
    """
    try:
        new_sni = message.text

        data = await state.get_data()
        inbound_id = data.get('selected_inbound_id')
        
        await update_inbound_sni(inbound_id, new_sni)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"upd_info_{data['server_id']}")
        
        await message.answer(
            f"‚úÖ SNI –∏–Ω–±–∞—É–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_sni}",
            reply_markup=kb.as_markup()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.callback_query(F.data == "change_port")
async def change_port_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–∞
    """
    data = await state.get_data()
    server_address = data.get('server_address')
    
    inbounds = await get_server_inbounds(server_address)

    if not inbounds:
        await callback.answer("‚ùå –ò–Ω–±–∞—É–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    for inbound in inbounds:
        kb.button(
            text=f"üì° {inbound['protocol']} –ø–æ—Ä—Ç: {inbound['port']}", 
            callback_data=f"change_port_inbound_{inbound['id']}"
        )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–±–∞—É–Ω–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—Ç–∞:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("change_port_inbound_"))
async def change_server_port_input(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ ID –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω–±–∞—É–Ω–¥–∞
    """
    inbound_id = int(callback.data.split("_")[3])
    await state.update_data(selected_inbound_id=inbound_id)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")
    
    await callback.message.edit_text(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—Ä—Ç –¥–ª—è –∏–Ω–±–∞—É–Ω–¥–∞:\n\n"
        "‚ÑπÔ∏è –ø–æ—Ä—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è inbound –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_server_port_update)

@router.message(AdminStates.waiting_server_port_update)
async def process_server_port_update(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ ID —Å–µ—Ä–≤–µ—Ä–∞
    """
    try:
        new_id = int(message.text)
        if new_id <= 0:
            await message.answer("‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
            
        data = await state.get_data()
        inbound_id = data.get('selected_inbound_id')
        
        await update_inbound_port(inbound_id, new_id)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"upd_info_{data['server_id']}")
        
        await message.answer(
            f"‚úÖ –ü–æ—Ä—Ç –∏–Ω–±–∞—É–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_id}",
            reply_markup=kb.as_markup()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.callback_query(F.data == "change_id")
async def change_server_id_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è ID —Å–µ—Ä–≤–µ—Ä–∞ - —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä –∏–Ω–±–∞—É–Ω–¥–∞
    """
    data = await state.get_data()
    server_address = data.get('server_address')
    
    inbounds = await get_server_inbounds(server_address)

    if not inbounds:
        await callback.answer("‚ùå –ò–Ω–±–∞—É–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    for inbound in inbounds:
        kb.button(
            text=f"üì° {inbound['protocol']} (ID: {inbound['inbound_id']})", 
            callback_data=f"change_id_inbound_{inbound['id']}"
        )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–±–∞—É–Ω–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è ID:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    

@router.callback_query(F.data.startswith("change_id_inbound_"))
async def change_server_id_input(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ ID –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω–±–∞—É–Ω–¥–∞
    """
    inbound_id = int(callback.data.split("_")[3])
    await state.update_data(selected_inbound_id=inbound_id)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")
    
    await callback.message.edit_text(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID –¥–ª—è –∏–Ω–±–∞—É–Ω–¥–∞:\n\n"
        "‚ÑπÔ∏è ID –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è inbound –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_server_id_update)

@router.message(AdminStates.waiting_server_id_update)
async def process_server_id_update(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ ID —Å–µ—Ä–≤–µ—Ä–∞
    """
    try:
        new_id = int(message.text)
        if new_id <= 0:
            await message.answer("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
            
        data = await state.get_data()
        inbound_id = data.get('selected_inbound_id')
        
        await update_inbound_id(inbound_id, new_id)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"upd_info_{data['server_id']}")
        
        await message.answer(
            f"‚úÖ ID –∏–Ω–±–∞—É–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_id}",
            reply_markup=kb.as_markup()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")

@router.callback_query(F.data == "change_protocol")
async def change_protocol_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ - —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä –∏–Ω–±–∞—É–Ω–¥–∞
    """
    data = await state.get_data()
    server_address = data.get('server_address')
    
    inbounds = await get_server_inbounds(server_address)

    if not inbounds:
        await callback.answer("‚ùå –ò–Ω–±–∞—É–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    for inbound in inbounds:
        kb.button(
            text=f"üì° {inbound['protocol']} (ID: {inbound['inbound_id']})", 
            callback_data=f"change_protocol_inbound_{inbound['id']}"
        )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üì° –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–±–∞—É–Ω–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("change_protocol_inbound_"))
async def change_protocol_select(callback: types.CallbackQuery, state: FSMContext):
    """
    –í—ã–±–æ—Ä –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω–±–∞—É–Ω–¥–∞
    """
    inbound_id = int(callback.data.split("_")[3])
    await state.update_data(selected_inbound_id=inbound_id)
    
    kb = InlineKeyboardBuilder()
    protocols = ["vless", "shadowsocks"]
    
    for protocol in protocols:
        kb.button(text=protocol, callback_data=f"set_protocol_{protocol}")
    
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")
    kb.adjust(2)

    await callback.message.edit_text(
        "üì° –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("set_protocol_"))
async def set_protocol(callback: types.CallbackQuery, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    """
    protocol = callback.data.split("_")[2]
    data = await state.get_data()
    inbound_id = data.get('selected_inbound_id')

    await update_inbound_protocol(inbound_id, protocol)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"upd_info_{data['server_id']}")
    
    await callback.message.edit_text(
        f"‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {protocol}",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "change_country")
async def change_country_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã
    """
    kb = InlineKeyboardBuilder()
    countries = {
        "üá´üá∑ –§—Ä–∞–Ω—Ü–∏—è": "France",
        "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è": "Germany",
        "üá®üáø –ß–µ—Ö–∏—è": "Czechia",
        "üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã": "Netherlands",
        "üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω": "Kazakhstan",
        "üá´üá∑ –§–∏–Ω–ª—è–Ω–¥–∏—è": "Finland",
    }
    
    for display_name, country_code in countries.items():
        kb.button(text=display_name, callback_data=f"set_country_{country_code}")
    
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_server_info")
    kb.adjust(2)

    await callback.message.edit_text(
        "üåç –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data.startswith("set_country_"))
async def set_country(callback: types.CallbackQuery, state: FSMContext):
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω—ã
    """
    country = callback.data.split("_")[2]
    data = await state.get_data()
    server_address = data.get('server_address')

    await update_server_info(server_address, None, country)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"upd_info_{data['server_id']}")
    
    await callback.message.edit_text(
        f"‚úÖ –°—Ç—Ä–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {country}",
        reply_markup=kb.as_markup()
    )

@router.callback_query(F.data == "update_servers")
async def update_servers(callback: types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    servers = await get_servers_with_total_clients()
    
    if not servers:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤", show_alert=True)
        return
    
    kb = InlineKeyboardBuilder()
    for server in servers:
        kb.button(
            text=f"üñ• {server['address']} ({server['total_clients']}/{server['total_max_clients']})", 
            callback_data=f"update_server_{server['id']}"
        )
    kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="servers_info")
    kb.adjust(1)
    
    await callback.message.edit_text(
        "üîÑ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:</b>",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("update_server_total_"))
async def update_server_total_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –æ–±—â–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    """
    server_id = int(callback.data.split("_")[3])
    servers = await get_all_servers()
    server_inbounds = [s for s in servers if s['id'] == server_id]
    
    if not server_inbounds:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    server = server_inbounds[0]
    inbounds_info = []
    total_clients = 0
    total_max = 0
    
    for inbound in server_inbounds:
        if inbound['protocol']:
            inbounds_info.append(
                f"üì° {inbound['protocol']}: {inbound['clients_count']}/{inbound['max_clients']}"
            )
            total_clients += inbound['clients_count']
            total_max += inbound['max_clients']
    
    await state.update_data(server_id=server_id, update_type="total")
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"update_server_{server_id}")
    
    await callback.message.edit_text(
        f"üñ• <b>–°–µ—Ä–≤–µ—Ä {server['address']}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–µ –ª–∏–º–∏—Ç—ã –ø–æ –∏–Ω–±–∞—É–Ω–¥–∞–º:\n"
        f"{chr(10).join(inbounds_info)}\n\n"
        f"–û–±—â–∏–π –ª–∏–º–∏—Ç: {total_max}\n"
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_clients}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–±—â–µ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_server_max_clients_update)

@router.callback_query(F.data.startswith("update_server_inbound_"))
async def update_server_inbound_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–Ω–±–∞—É–Ω–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
    """
    server_id = int(callback.data.split("_")[3])
    servers = await get_all_servers()
    server_inbounds = [s for s in servers if s['id'] == server_id]
    
    if not server_inbounds:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    kb = InlineKeyboardBuilder()
    for inbound in server_inbounds:
        if inbound['protocol']:
            kb.button(
                text=f"üì° {inbound['protocol']} ({inbound['clients_count']}/{inbound['max_clients']})", 
                callback_data=f"update_inbound_{server_id}_{inbound['inbound_id']}"
            )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"update_server_{server_id}")
    kb.adjust(1)
    
    await callback.message.edit_text(
        f"üñ• <b>–°–µ—Ä–≤–µ—Ä {server_inbounds[0]['address']}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω–±–∞—É–Ω–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("update_inbound_"))
async def update_inbound_max_clients_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–≤–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–Ω–±–∞—É–Ω–¥–∞
    """
    _, server_id, inbound_id = callback.data.split("_")[1:]
    server_id = int(server_id)
    inbound_id = int(inbound_id)
    
    servers = await get_all_servers()
    inbound = next((s for s in servers if s['id'] == server_id and s['inbound_id'] == inbound_id), None)
    
    if not inbound:
        await callback.answer("‚ùå –ò–Ω–±–∞—É–Ω–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    await state.update_data(server_id=server_id, inbound_id=inbound_id)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"update_server_{server_id}")
    
    await callback.message.edit_text(
        f"üñ• <b>–°–µ—Ä–≤–µ—Ä {inbound['address']}</b>\n"
        f"üì° <b>–ò–Ω–±–∞—É–Ω–¥ {inbound['protocol']}</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {inbound['max_clients']}\n"
        f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {inbound['clients_count']}\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    
    await state.set_state(AdminStates.waiting_server_max_clients_update)

@router.callback_query(F.data.startswith("update_server_"))
async def update_server_max_clients_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞: –æ–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–±–∞—É–Ω–¥–∞
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥—Ä—É–≥–∏–º callback'–æ–º
    if callback.data.startswith("update_server_total_") or callback.data.startswith("update_server_inbound_"):
        return
        
    server_id = int(callback.data.split("_")[2])
    servers = await get_all_servers()
    server_inbounds = [s for s in servers if s['id'] == server_id]
    
    if not server_inbounds:
        await callback.answer("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    server = server_inbounds[0]
    total_clients = sum(s['clients_count'] for s in server_inbounds if s['protocol'])
    total_max = sum(s['max_clients'] for s in server_inbounds if s['protocol'])
    
    kb = InlineKeyboardBuilder()
    kb.button(
        text="üñ• –ò–∑–º–µ–Ω–∏—Ç—å –æ–±—â–∏–π –ª–∏–º–∏—Ç —Å–µ—Ä–≤–µ—Ä–∞", 
        callback_data=f"update_server_total_{server_id}"
    )
    kb.button(
        text="üì° –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–±–∞—É–Ω–¥–∞", 
        callback_data=f"update_server_inbound_{server_id}"
    )
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="update_servers")
    kb.adjust(1)
    
    await callback.message.edit_text(
        f"üñ• <b>–°–µ—Ä–≤–µ—Ä {server['address']}</b>\n\n"
        f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_clients}\n"
        f"–û–±—â–∏–π –ª–∏–º–∏—Ç: {total_max}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )

@router.message(AdminStates.waiting_server_max_clients_update)
async def process_server_max_clients_update(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–æ–≤–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
    """
    try:
        new_max_clients = int(message.text)
        if new_max_clients <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return
            
        data = await state.get_data()
        server_id = data['server_id']
        update_type = data.get('update_type')
        inbound_id = data.get('inbound_id')
        
        servers = await get_all_servers()
        server_inbounds = [s for s in servers if s['id'] == server_id]
        
        if update_type == "total":
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–±–∞—É–Ω–¥—ã
            active_inbounds = [s for s in server_inbounds if s['protocol']]
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤
            total_clients = sum(inbound['clients_count'] for inbound in active_inbounds)
            if total_clients > new_max_clients:
                clients_info = "\n".join(
                    f"üì° {inbound['protocol']}: {inbound['clients_count']} –∫–ª–∏–µ–Ω—Ç–æ–≤"
                    for inbound in active_inbounds
                )
                await message.answer(
                    f"‚ùå –ù–æ–≤—ã–π –æ–±—â–∏–π –ª–∏–º–∏—Ç ({new_max_clients}) –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ ({total_clients})!\n\n"
                    f"–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:\n{clients_info}"
                )
                return
            
            # –ï—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
            inbound_count = len(active_inbounds)
            if inbound_count > 0:
                per_inbound = new_max_clients // inbound_count
                remaining = new_max_clients % inbound_count
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∏–Ω–±–∞—É–Ω–¥–æ–≤
                for i, inbound in enumerate(active_inbounds):
                    current_max = per_inbound + (1 if i < remaining else 0)
                    await update_inbound_max_clients(server_id, inbound['inbound_id'], current_max)
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–±–∞—É–Ω–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            inbound = next((s for s in server_inbounds if s['inbound_id'] == inbound_id), None)
            if inbound['clients_count'] > new_max_clients:
                await message.answer(
                    "‚ùå –ù–æ–≤—ã–π –ª–∏–º–∏—Ç –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤!\n"
                    f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {inbound['clients_count']}"
                )
                return
            await update_inbound_max_clients(server_id, inbound_id, new_max_clients)
        
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É", callback_data=f"update_server_{server_id}")
        
        success_message = (
            "‚úÖ –õ–∏–º–∏—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"üñ• –°–µ—Ä–≤–µ—Ä: {server_inbounds[0]['address']}\n"
        )
        if update_type == "total":
            per_inbound_info = "\n".join(
                f"üì° {inbound['protocol']}: {per_inbound + (1 if i < remaining else 0)}"
                for i, inbound in enumerate(active_inbounds)
            )
            success_message += (
                f"üìä –ù–æ–≤—ã–π –æ–±—â–∏–π –ª–∏–º–∏—Ç: {new_max_clients}\n"
                f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∏–Ω–±–∞—É–Ω–¥–∞–º:\n{per_inbound_info}"
            )
        else:
            inbound = next((s for s in server_inbounds if s['inbound_id'] == inbound_id), None)
            success_message += (
                f"üì° –ò–Ω–±–∞—É–Ω–¥: {inbound['protocol']}\n"
                f"üìä –ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {new_max_clients}"
            )
        
        await message.answer(success_message, reply_markup=kb.as_markup())
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")    

@router.callback_query(F.data == "add_server")
async def add_server_start(callback: types.CallbackQuery, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    """
    user = await get_user(callback.from_user.id)
    if not user.get('is_admin'):
        await callback.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
        
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    
    await callback.message.edit_text(
        "üñ• <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=kb.as_markup(),
        parse_mode="HTML"
    )
    await state.set_state(AdminStates.waiting_server_address)

@router.message(AdminStates.waiting_server_address)
async def process_server_address(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞
    """
    await state.update_data(address=message.text)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    
    await message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=kb.as_markup()
    )
    await state.set_state(AdminStates.waiting_server_username)

@router.message(AdminStates.waiting_server_username)
async def process_server_username(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞
    """
    await state.update_data(username=message.text)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    
    await message.answer(
        "üîë –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞:",
        reply_markup=kb.as_markup()
    )
    await state.set_state(AdminStates.waiting_server_password)

@router.message(AdminStates.waiting_server_password)
async def process_server_password(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–æ–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    """
    await state.update_data(password=message.text)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_back")
    
    await message.answer(
        "üî¢ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤:",
        reply_markup=kb.as_markup()
    )
    await state.set_state(AdminStates.waiting_server_max_clients)

@router.message(AdminStates.waiting_server_max_clients)
async def process_server_max_clients(message: types.Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
    """
    try:
        max_clients = int(message.text)
        if max_clients <= 0:
            raise ValueError
            
        data = await state.get_data()
        
        await add_server(
            address=data['address'],
            username=data['username'],
            password=data['password'],
            max_clients=max_clients
        )
        
        await message.answer(
            "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üìç –ê–¥—Ä–µ—Å: {data['address']}\n"
            f"üë§ –õ–æ–≥–∏–Ω: {data['username']}\n"
            f"üî¢ –ú–∞–∫—Å. –∫–ª–∏–µ–Ω—Ç–æ–≤: {max_clients}"
        )
        
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∫–ª–∏–µ–Ω—Ç–æ–≤!")
        return
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")
        return
    
    await state.clear()
    await admin_menu(message)

@router.callback_query(F.data == "admin_back")
async def admin_back(callback: types.CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é
    """
    await state.clear()
    await callback.message.answer("–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    await callback.message.delete()
