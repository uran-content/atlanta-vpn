# handlers.scheduler.py
import asyncio
import logging
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from config import API_TOKEN
from handlers.database import (
    update_balance,
    update_key_expriration_date,
    get_all_users_with_subscription,
    get_user_payment_methods,
    update_user_subscription,
    get_admins,
    get_all_keys_to_expire_today,
    get_user
)
from handlers.payments import create_auto_payment, check_payment_status
from handlers.utils import send_info_for_admins

logger = logging.getLogger(__name__)

# –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞
# bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

async def process_auto_payments(bot=None):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    
    Args:
        bot (Bot, optional): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π")
    
    try:
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        if bot is None:
            bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            need_to_close = True
        else:
            need_to_close = False
            
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
        keys = await get_all_keys_to_expire_today()

        if not keys:
            logger.info("–ù–µ—Ç –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —Å–µ–≥–æ–¥–Ω—è")
            return
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(keys)} –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —Å–µ–≥–æ–¥–Ω—è.")
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        admins = await get_admins()
        await send_info_for_admins(
            f"üîÑ –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(keys)}",
            admins,
            bot
        )
        
        # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é today
        payment_count = 0
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        for key in keys:
            success = await process_key_payment(key, bot)
            if success:
                payment_count += 1
                    
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            await asyncio.sleep(1)
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
        await send_info_for_admins(
            f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω\n"
            f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–ª—é—á–µ–π: {len(keys)}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {payment_count}",
            admins,
            bot
        )
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞, –µ—Å–ª–∏ –º—ã –µ–≥–æ —Å–æ–∑–¥–∞–ª–∏
        if need_to_close:
            await bot.session.close()
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}"
        logger.error(error_msg)
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        admins = await get_admins()
        await send_info_for_admins(error_msg, admins, bot)

async def process_key_payment(key, bot: Bot) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –ø—ã—Ç–∞—è—Å—å —Å–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
    
    Args:
        user (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    user_id = key['user_id']

    expiration_date_milliseconds = key['expiration_date']
    timestamp_s = int(expiration_date_milliseconds) / 1000  # –¥–µ–ª–∏–º –Ω–∞ 1000 ‚Äî –ø–æ–ª—É—á–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
    dt = datetime.fromtimestamp(timestamp_s)
    subscription_end = dt.strftime("%d.%m.%Y %H:%M")
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # 1. –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å —Å —Å—á–µ—Ç–∞ –≤ –±–æ—Ç–µ
        user_info = await get_user(user_id)

        payment_attempts = 0
        payment_success = False

        need_to_excuse = False
        if key["price"] is None:
            need_to_excuse = True
        key_price = int(key["price"]) if key["price"] else 1
        days = int(key["days"]) if key["days"] else 1

        print(f'balance = {user_info["balance"]}')
        print(f'key_price = {key_price}')
        if int(user_info["balance"]) >= key_price:
            payment_attempts += 1
            await pay_with_int_balance(user_id, int(user_info["balance"]), key_price)
            successful_method = { "id": "Internal balance" }
            payment_success = True
        else:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payment_methods = await get_user_payment_methods(user_id)
            
            if not payment_methods:
                logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é
                await send_manual_renewal_notification(user_id, subscription_end, bot)
                return False
            
            # –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            successful_method = None
            
            # –ü—Ä–æ–±—É–µ–º —Å–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
            for payment_method in payment_methods:
                payment_method_id = payment_method['payment_method_id']
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
                description = f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ VPN"
                
                try:
                    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂
                    payment_id = await create_auto_payment(
                        amount=key_price,
                        description=description,
                        saved_method_id=payment_method_id
                    )
                    
                    payment_attempts += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                    payment_success, saved_payment_method_id, payment = await check_payment_status(payment_id, key_price)
                    
                    if payment_success:
                        # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –º–µ—Ç–æ–¥ –∏ —Å—É–º–º—É
                        successful_method = payment_method
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã ID: {payment_method['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        
                        # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
                        break
                    else:
                        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
                        logger.warning(f"–ù–µ—É–¥–∞—á–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã ID: {payment_method['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã ID: {payment_method['id']}: {str(e)}")
                    continue
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø—ã—Ç–æ–∫ —Å–ø–∏—Å–∞–Ω–∏—è
        if payment_success:
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            new_dt = dt + timedelta(days=days)
            new_end_date_ms = int(new_dt.timestamp() * 1000)
            dt = datetime.strptime(subscription_end, "%d.%m.%Y %H:%M")
            new_end_date = dt + timedelta(days=int(days))
            await update_user_subscription(user_id, str(new_end_date.isoformat()))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
            if not need_to_excuse:
                await send_success_payment_notification(user_id, key_price, new_end_date.isoformat(), bot)
            else:
                await send_success_payment_notification_with_excuse(user_id, key_price, new_end_date.isoformat(), bot)
            
            await update_key_expriration_date(key=key["key"], new_end_date=new_end_date_ms)

            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await get_admins()
            await send_info_for_admins(
                f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
                f"–°—É–º–º–∞: {key_price}‚ÇΩ\n"
                f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã ID: {successful_method['id']}\n"
                f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end_date.strftime('%d.%m.%Y')}",
                admins,
                bot,
                username=(await get_user(user_id))['username']
            )

            return True
        else:
            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å
            logger.warning(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —É–¥–∞–ª–∏—Å—å. –ü–æ–ø—ã—Ç–æ–∫: {payment_attempts}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
            if payment_methods:
                await send_failed_payment_notification(user_id, key_price, subscription_end, payment_attempts, bot=bot)
            
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await get_admins()
            await send_info_for_admins(
                f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {payment_attempts}",
                admins,
                bot,
                username=(await get_user(user_id))['username']
            )

            return False
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}"
        logger.error(error_msg)
    
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        admins = await get_admins()
        await send_info_for_admins(
            f"‚ùå {error_msg}",
            admins,
            bot,
            username=(await get_user(user_id))['username'] if await get_user(user_id) else None
        )
    
        return False

async def pay_with_int_balance(user_id, balance, price):
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –æ–ø–ª–∞—Ç—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—Å—á–µ—Ç –µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    new_balance = balance - price
    if new_balance < 0:
        raise ValueError("–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!!")
    
    await update_balance(user_id, new_balance)

async def send_success_payment_notification_with_excuse(user_id, amount, new_end_date, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
    """
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = datetime.fromisoformat(new_end_date).strftime("%d.%m.%Y")
        
        message = (
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!</b>\n\n"
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ VPN –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞.\n\n"
            f"‚îî üí∞ –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è: <b>{amount}‚ÇΩ</b>\n"
            f"‚îî üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{formatted_date}</b>\n\n"
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, "
            f"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
        )
        
        await bot.send_message(user_id, message)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

async def send_success_payment_notification(user_id, amount, new_end_date, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
    """
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = datetime.fromisoformat(new_end_date).strftime("%d.%m.%Y")
        
        message = (
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!</b>\n\n"
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ VPN –±—ã–ª–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–Ω–∞.\n\n"
            f"‚îî üí∞ –°—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è: <b>{amount}‚ÇΩ</b>\n"
            f"‚îî üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: <b>{formatted_date}</b>\n\n"
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º! –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, "
            f"–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞."
        )
        
        await bot.send_message(user_id, message)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

async def send_failed_payment_notification(user_id, amount, subscription_end, bot: Bot, attempts=1):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
    
    Args:
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        amount (int): –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
        subscription_end (str): –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        attempts (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–ø–∏—Å–∞–Ω–∏—è
    """
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = datetime.fromisoformat(subscription_end).strftime("%d.%m.%Y")
        
        attempts_text = f"–ú—ã –ø–æ–ø—ã—Ç–∞–ª–∏—Å—å —Å–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å–æ –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã ({attempts} –ø–æ–ø—ã—Ç–æ–∫)."
        
        message = (
            f"‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É</b>\n\n"
            f"{attempts_text}\n\n"
            f"‚îî üí∞ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞: <b>{amount}‚ÇΩ</b>\n"
            f"‚îî üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏: <b>{formatted_date}</b>\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–∞—Ö\n"
            f"‚Ä¢ –ö–∞—Ä—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –∏–º–µ—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n"
            f"‚Ä¢ –ë–∞–Ω–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç."
        )
        
        await bot.send_message(user_id, message)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

async def send_manual_renewal_notification(user_id, subscription_end, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    """
    try:
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        formatted_date = datetime.fromisoformat(subscription_end).strftime("%d.%m.%Y")
        
        message = (
            f"‚ö†Ô∏è <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è</b>\n\n"
            f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ VPN –∏—Å—Ç–µ–∫–∞–µ—Ç <b>—Å–µ–≥–æ–¥–Ω—è ({formatted_date})</b>.\n\n"
            f"–£ –≤–∞—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è "
            f"—Å–µ—Ä–≤–∏—Å–æ–º –±–µ–∑ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞.\n\n"
            f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        )
        
        await bot.send_message(user_id, message)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä—É—á–Ω–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")