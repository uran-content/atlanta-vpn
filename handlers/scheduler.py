# handlers.scheduler.py
import asyncio
import logging
from datetime import datetime, timezone, timedelta
import tzlocal
from typing import Dict

from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.base import JobLookupError
from apscheduler.triggers.date import DateTrigger
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from config import API_TOKEN, SUPPORT_URI
from handlers.database import (
    update_balance,
    update_key_expriration_date,
    get_all_users_with_subscription,
    get_user_payment_methods,
    update_user_subscription,
    get_admins,
    get_all_keys_to_expire,
    remove_expired_keys,
    check_expiring_subscriptions,
    remove_key,
    get_user,
    check_expiring_in_3_days_subscriptions
)
from handlers.payments import create_auto_payment, check_payment_status, PAYMENT_TYPES
from handlers.utils import send_info_for_admins, unix_to_str

logger = logging.getLogger(__name__)

# –£–¥–∞–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –±–æ—Ç–∞
# bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

active_jobs = []
Scheduler = AsyncIOScheduler()
def remove_job(id: str):
    if id in active_jobs:
        try:
            Scheduler.remove_job(id)
            active_jobs.remove(id)
        except JobLookupError as e:
            logger.warning(f"–ü–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—Ç—É: {id}")
        except ValueError:
            logger.warning(f"–ü–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –Ω–µ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—Ç—É –≤ —Å–ø–∏—Å–∫–µ active_jobs: {id}")

async def process_auto_payments(bot=None):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    
    Args:
        bot (Bot, optional): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    """
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π")

    admins = await get_admins()

    if not Scheduler.running:
        Scheduler.start()
    
    try:
        # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        if bot is None:
            bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
            need_to_close = True
        else:
            need_to_close = False
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
        keys = await get_all_keys_to_expire()

        if keys:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(keys)} –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —Å–µ–≥–æ–¥–Ω—è.")
            
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
            await send_info_for_admins(
                f"üîÑ –ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(keys)}",
                admins,
                bot
            )
            
            # –£–¥–∞–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é today
            payment_count = 0
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for key in keys:
                success = await process_key_payment(key, bot)
                if success:
                    payment_count += 1

                    key_str = key["key"]
                    job_id = f'remove_{key_str}'
                    
                    remove_job(job_id)
                else:
                    key_str = key["key"]
                    user_id = key["user_id"]

                    run_time = datetime.now(tz=tzlocal.get_localzone()) + timedelta(days=1)
                    
                    job_id = f'remove_{key_str}'
                    job = Scheduler.add_job(
                        remove_key,
                        trigger=DateTrigger(run_date=run_time),
                        id=job_id,
                        name=f'Remove_{key_str}',
                        replace_existing=True,
                        args=[key_str, user_id]
                    )
                    active_jobs.append(job_id)
                        
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await asyncio.sleep(1)
            
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
            await send_info_for_admins(
                f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω\n"
                f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–ª—é—á–µ–π: {len(keys)}\n"
                f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: {payment_count}",
                admins,
                bot
            )

        await send_info_for_admins(
            "–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏—Å—Ç–µ–∫–∞—é—â–∏—Ö –∫–ª—é—á–∞—Ö",
            admins,
            bot
        )

        keys_to_expire_tomorrow = await check_expiring_subscriptions()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(keys_to_expire_tomorrow)} –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞")
        for key in keys_to_expire_tomorrow:
            user_id = key["user_id"]
            expiration_date = unix_to_str(key['expiration_date'], include_time=False)
            payment_methods, balance = await get_user_payment_methods(user_id, include_balance=True)
            if (not payment_methods) and ((key["price"] is None) or (balance < key["price"])):
                from handlers.handlers import send_manual_renewal_notification
                await send_manual_renewal_notification(user_id, expiration_date, bot, when="–∑–∞–≤—Ç—Ä–∞", key=key)
        
        keys_to_expire_in_3_days = await check_expiring_in_3_days_subscriptions()
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(keys_to_expire_in_3_days)} –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è")
        for key in keys_to_expire_in_3_days:
            user_id = key["user_id"]
            expiration_date = unix_to_str(key['expiration_date'], include_time=False)
            payment_methods, balance = await get_user_payment_methods(user_id, include_balance=True)
            if (not payment_methods) and ((key["price"] is None) or (balance < key["price"])):
                from handlers.handlers import send_manual_renewal_notification
                await send_manual_renewal_notification(user_id, expiration_date, bot, when="—á–µ—Ä–µ–∑ 3 –¥–Ω—è", key=key)

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞, –µ—Å–ª–∏ –º—ã –µ–≥–æ —Å–æ–∑–¥–∞–ª–∏
        if need_to_close:
            await bot.session.close()
            
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}"
        logger.error(error_msg)
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        admins = await get_admins()
        await send_info_for_admins(error_msg, admins, bot)

async def process_key_payment(key: Dict, bot: Bot) -> bool:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
    –ø—ã—Ç–∞—è—Å—å —Å–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å–æ –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
    
    Args:
        user (dict): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    """
    user_id = key['user_id']

    subscription_end = unix_to_str(key['expiration_date'], include_time=True)
    subscription_end_no_time = unix_to_str(key['expiration_date'], include_time=False)
    
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        # 1. –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —Å–ø–∏—Å–∞—Ç—å —Å —Å—á–µ—Ç–∞ –≤ –±–æ—Ç–µ
        user_info = await get_user(user_id)

        payment_attempts = 0
        payment_success = False

        if key["price"] is None:
            from handlers.handlers import ask_for_key_period
            await ask_for_key_period(key, user_id, bot)
            return False
        
        key_price = int(key["price"])
        days = int(key["days"])

        if int(user_info["balance"]) >= key_price:
            payment_attempts += 1
            await pay_with_int_balance(user_id, int(user_info["balance"]), key_price)
            successful_method = { "id": "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å" }
            successful_type = "–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–∞–ª–∞–Ω—Å"
            payment_success = True
        else:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            payment_methods = await get_user_payment_methods(user_id)
            
            if not payment_methods:
                logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é
                from handlers.handlers import send_manual_renewal_notification
                await send_manual_renewal_notification(user_id, subscription_end, bot, key=key)
                return False
            
            # –§–ª–∞–≥ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            successful_method = None
            
            # –ü—Ä–æ–±—É–µ–º —Å–ø–∏—Å–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –∫–∞–∂–¥–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã
            for payment_method in payment_methods:
                payment_method_id = payment_method['payment_method_id']
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
                description = f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ VPN"
                
                try:
                    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞—Ç–µ–∂
                    payment_id = await create_auto_payment(
                        amount=key_price,
                        description=description,
                        saved_method_id=payment_method_id
                    )
                    
                    payment_attempts += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                    payment_success, saved_payment_method_type, payment = await check_payment_status(payment_id, key_price, second_arg="type")
                    
                    if payment_success:
                        # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –∑–∞–ø–æ–º–∏–Ω–∞–µ–º –º–µ—Ç–æ–¥ –∏ —Å—É–º–º—É
                        successful_method = payment_method
                        successful_type = saved_payment_method_type
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                        logger.info(f"–£—Å–ø–µ—à–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã ID: {payment_method['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                        
                        # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–µ—Ä–µ–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
                        break
                    else:
                        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
                        logger.warning(f"–ù–µ—É–¥–∞—á–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ —Å –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã ID: {payment_method['id']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–ø–∏—Å–∞–Ω–∏—è —Å –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã ID: {payment_method['id']}: {str(e)}")
                    continue
            
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ø—ã—Ç–æ–∫ —Å–ø–∏—Å–∞–Ω–∏—è
        if payment_success:
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            expiration_date_milliseconds = key['expiration_date']
            timestamp_s = int(expiration_date_milliseconds) / 1000  # –¥–µ–ª–∏–º –Ω–∞ 1000 ‚Äî –ø–æ–ª—É—á–∞–µ–º —Å–µ–∫—É–Ω–¥—ã
            dt = datetime.fromtimestamp(timestamp_s)
            new_dt = dt + timedelta(days=days)
            new_end_date_ms = int(new_dt.timestamp() * 1000)
            dt = datetime.strptime(subscription_end, "%d.%m.%Y %H:%M")
            new_end_date = dt + timedelta(days=int(days))
            await update_user_subscription(user_id, str(new_end_date.isoformat()))
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
            from handlers.handlers import send_success_payment_notification
            await send_success_payment_notification(user_id,
                                                    key_price,
                                                    new_end_date.isoformat(),
                                                    days,
                                                    successful_type,
                                                    bot)
            
            await update_key_expriration_date(key=key["key"], new_end_date=new_end_date_ms)

            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await get_admins()
            await send_info_for_admins(
                f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
                f"–°—É–º–º–∞: {key_price}‚ÇΩ\n"
                f"–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã ID: {successful_method['id']}\n"
                f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {new_end_date.strftime('%d.%m.%Y')}",
                admins,
                bot,
                username=(await get_user(user_id))['username']
            )

            return True
        else:
            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å
            logger.warning(f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ —É–¥–∞–ª–∏—Å—å. –ü–æ–ø—ã—Ç–æ–∫: {payment_attempts}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
            if payment_methods:
                from handlers.handlers import send_failed_payment_notification
                await send_failed_payment_notification(user_id, key_price, subscription_end_no_time, attempts=payment_attempts, bot=bot, key=key)
            
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            admins = await get_admins()
            await send_info_for_admins(
                f"‚ùå –ù–µ—É–¥–∞—á–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: {payment_attempts}",
                admins,
                bot,
                username=(await get_user(user_id))['username']
            )

            return False
        
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {str(e)}"
        logger.error(error_msg)
    
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ–± –æ—à–∏–±–∫–µ
        admins = await get_admins()
        await send_info_for_admins(
            f"‚ùå {error_msg}",
            admins,
            bot,
            username=(await get_user(user_id))['username'] if await get_user(user_id) else None
        )
    
        return False

async def pay_with_int_balance(user_id, balance, price):
    """–ü—Ä–æ–≤–æ–¥–∏—Ç –æ–ø–ª–∞—Ç—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞—Å—á–µ—Ç –µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
    new_balance = balance - price
    if new_balance < 0:
        raise ValueError("–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã –ø—Ä–µ–≤—ã—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!!")
    
    await update_balance(user_id, new_balance)
